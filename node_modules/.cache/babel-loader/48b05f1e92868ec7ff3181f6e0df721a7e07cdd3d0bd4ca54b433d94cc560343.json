{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ItemsList from '../../src/components/ItemsList.vue';\nimport BasketList from '../../src/components/BasketList.vue';\nimport { mapActions } from 'vuex';\nexport default {\n  components: {\n    ItemsList,\n    BasketList\n  },\n  mounted() {\n    this.initPage();\n  },\n  data() {\n    return {\n      viruses: [],\n      cartItems: [],\n      checkedViruses: [],\n      checkedCartItems: []\n    };\n  },\n  methods: {\n    ...mapActions(['getAllViruses', 'addToCartAction', 'removeFromCartAction', 'clearCartAction', 'checkoutAction']),\n    async initPage() {\n      await this.getAllViruses();\n      this.viruses = this.$store.state.viruses;\n      console.log(this.viruses);\n    },\n    addToCart({\n      item,\n      amount,\n      index\n    }) {\n      console.log({\n        item,\n        amount,\n        index\n      });\n      if (!amount || isNaN(parseInt(amount))) {\n        alert(`Veuillez sélectionner une quantité valide !\\nQuantité actuelle : ${amount}`);\n        return;\n      }\n      const selectedVirus = item; // Utilisez directement l'objet virus\n      const existingItemIndex = this.cartItems.findIndex(cartItem => cartItem.virus._id === selectedVirus._id);\n      if (existingItemIndex !== -1) {\n        this.cartItems[existingItemIndex].quantity = parseInt(this.cartItems[existingItemIndex].quantity) + parseInt(amount);\n      } else {\n        this.cartItems.push({\n          virus: selectedVirus,\n          quantity: parseInt(amount)\n        });\n      }\n      console.log(selectedVirus);\n      this.addToCartAction({\n        virus: selectedVirus,\n        quantity: parseInt(amount)\n      });\n    },\n    addAllToCart(selectedItems) {\n      this.checkedViruses.forEach(virusIndex => {\n        const virusToAdd = this.viruses[virusIndex];\n        const amountToAdd = selectedItems[virusIndex];\n        this.addToCart({\n          item: virusToAdd,\n          amount: amountToAdd\n        });\n      });\n    },\n    toggleCartItemCheckbox(index) {\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\n    },\n    removeFromCart(index) {\n      this.removeFromCartAction(index.index);\n      this.cartItems.splice(index.index, 1);\n    },\n    clearCart() {\n      this.cartItems = [];\n      this.clearCartAction();\n    },\n    checkout() {\n      console.log(\"ok\");\n      // Logique pour finaliser l'achat\n      //this.checkoutAction(this.cartItems);\n    },\n    toggleVirusCheckbox(index) {\n      const updatedCheckedViruses = [...this.checkedViruses];\n      const indexInArray = updatedCheckedViruses.indexOf(index);\n      if (indexInArray === -1) {\n        updatedCheckedViruses.push(index);\n      } else {\n        updatedCheckedViruses.splice(indexInArray, 1);\n      }\n      this.checkedViruses = updatedCheckedViruses;\n    }\n  }\n};","map":{"version":3,"names":["ItemsList","BasketList","mapActions","components","mounted","initPage","data","viruses","cartItems","checkedViruses","checkedCartItems","methods","getAllViruses","$store","state","console","log","addToCart","item","amount","index","isNaN","parseInt","alert","selectedVirus","existingItemIndex","findIndex","cartItem","virus","_id","quantity","push","addToCartAction","addAllToCart","selectedItems","forEach","virusIndex","virusToAdd","amountToAdd","toggleCartItemCheckbox","removeFromCart","removeFromCartAction","splice","clearCart","clearCartAction","checkout","toggleVirusCheckbox","updatedCheckedViruses","indexInArray","indexOf"],"sources":["src/views/ShopBuy.vue"],"sourcesContent":["<!-- ShopBuy.vue -->\r\n<template>\r\n  <div>\r\n    <p>Viruses checkbox : {{ this.checkedViruses }}</p>\r\n    <p>Panier : {{this.cartItems}}</p>\r\n    <div class=\"shop-container\">\r\n      <div class=\"items-list\">\r\n        <ItemsList\r\n            :items=\"viruses\"\r\n            :checked=\"checkedViruses\"\r\n            @item-button-clicked=\"addToCart\"\r\n            @add-all-to-cart=\"addAllToCart\"\r\n            @checked-changed=\"toggleVirusCheckbox\"\r\n        />\r\n      </div>\r\n      <div class=\"basket-list\">\r\n        <BasketList\r\n            :items=\"cartItems\"\r\n            :checked=\"checkedCartItems\"\r\n            @checked-changed=\"toggleCartItemCheckbox\"\r\n            @item-button-clicked=\"removeFromCart\"\r\n            @list-button-clicked=\"clearCart\"\r\n            @acheter=\"checkout\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemsList from '../../src/components/ItemsList.vue';\r\nimport BasketList from '../../src/components/BasketList.vue';\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  components: {\r\n    ItemsList,\r\n    BasketList,\r\n  },\r\n\r\n  mounted() {\r\n    this.initPage();\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      viruses: [],\r\n      cartItems: [],\r\n      checkedViruses: [],\r\n      checkedCartItems: [],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\r\n      'getAllViruses',\r\n      'addToCartAction',\r\n      'removeFromCartAction',\r\n      'clearCartAction',\r\n      'checkoutAction',\r\n    ]),\r\n\r\n    async initPage() {\r\n      await this.getAllViruses();\r\n      this.viruses = this.$store.state.viruses;\r\n      console.log(this.viruses);\r\n    },\r\n\r\n    addToCart({ item, amount, index }) {\r\n      console.log({ item, amount, index })\r\n      if (!amount || isNaN(parseInt(amount))) {\r\n        alert(\r\n            `Veuillez sélectionner une quantité valide !\\nQuantité actuelle : ${amount}`\r\n        );\r\n        return;\r\n      }\r\n      const selectedVirus = item; // Utilisez directement l'objet virus\r\n      const existingItemIndex = this.cartItems.findIndex(\r\n          (cartItem) => cartItem.virus._id === selectedVirus._id\r\n      );\r\n      if (existingItemIndex !== -1) {\r\n        this.cartItems[existingItemIndex].quantity =\r\n            parseInt(this.cartItems[existingItemIndex].quantity) +\r\n            parseInt(amount);\r\n      } else {\r\n        this.cartItems.push({ virus: selectedVirus, quantity: parseInt(amount) });\r\n      }\r\n      console.log(selectedVirus)\r\n      this.addToCartAction({ virus: selectedVirus, quantity: parseInt(amount) });\r\n    },\r\n\r\n    addAllToCart(selectedItems) {\r\n      this.checkedViruses.forEach((virusIndex) => {\r\n        const virusToAdd = this.viruses[virusIndex];\r\n        const amountToAdd = selectedItems[virusIndex];\r\n        this.addToCart({ item: virusToAdd, amount: amountToAdd });\r\n      });\r\n    },\r\n\r\n    toggleCartItemCheckbox(index) {\r\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\r\n    },\r\n\r\n    removeFromCart(index) {\r\n      this.removeFromCartAction(index.index);\r\n      this.cartItems.splice(index.index, 1);\r\n    },\r\n\r\n    clearCart() {\r\n      this.cartItems = [];\r\n      this.clearCartAction();\r\n    },\r\n\r\n    checkout() {\r\n      console.log(\"ok\");\r\n      // Logique pour finaliser l'achat\r\n      //this.checkoutAction(this.cartItems);\r\n    },\r\n\r\n    toggleVirusCheckbox(index) {\r\n      const updatedCheckedViruses = [...this.checkedViruses];\r\n      const indexInArray = updatedCheckedViruses.indexOf(index);\r\n      if (indexInArray === -1) {\r\n        updatedCheckedViruses.push(index);\r\n      } else {\r\n        updatedCheckedViruses.splice(indexInArray, 1);\r\n      }\r\n      this.checkedViruses = updatedCheckedViruses;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.shop-container {\r\n  display: flex;\r\n}\r\n\r\n.items-list {\r\n  flex: 1;\r\n  margin-right: 20px;\r\n}\r\n\r\n.basket-list {\r\n  flex: 1;\r\n}\r\n</style>\r\n"],"mappings":";AA8BA,OAAAA,SAAA;AACA,OAAAC,UAAA;AACA,SAAAC,UAAA;AAEA;EACAC,UAAA;IACAH,SAAA;IACAC;EACA;EAEAG,QAAA;IACA,KAAAC,QAAA;EACA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,SAAA;MACAC,cAAA;MACAC,gBAAA;IACA;EACA;EAEAC,OAAA;IACA,GAAAT,UAAA,EACA,iBACA,mBACA,wBACA,mBACA,iBACA;IAEA,MAAAG,SAAA;MACA,WAAAO,aAAA;MACA,KAAAL,OAAA,QAAAM,MAAA,CAAAC,KAAA,CAAAP,OAAA;MACAQ,OAAA,CAAAC,GAAA,MAAAT,OAAA;IACA;IAEAU,UAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC;IAAA;MACAL,OAAA,CAAAC,GAAA;QAAAE,IAAA;QAAAC,MAAA;QAAAC;MAAA;MACA,KAAAD,MAAA,IAAAE,KAAA,CAAAC,QAAA,CAAAH,MAAA;QACAI,KAAA,CACA,oEAAAJ,MAAA,EACA;QACA;MACA;MACA,MAAAK,aAAA,GAAAN,IAAA;MACA,MAAAO,iBAAA,QAAAjB,SAAA,CAAAkB,SAAA,CACAC,QAAA,IAAAA,QAAA,CAAAC,KAAA,CAAAC,GAAA,KAAAL,aAAA,CAAAK,GACA;MACA,IAAAJ,iBAAA;QACA,KAAAjB,SAAA,CAAAiB,iBAAA,EAAAK,QAAA,GACAR,QAAA,MAAAd,SAAA,CAAAiB,iBAAA,EAAAK,QAAA,IACAR,QAAA,CAAAH,MAAA;MACA;QACA,KAAAX,SAAA,CAAAuB,IAAA;UAAAH,KAAA,EAAAJ,aAAA;UAAAM,QAAA,EAAAR,QAAA,CAAAH,MAAA;QAAA;MACA;MACAJ,OAAA,CAAAC,GAAA,CAAAQ,aAAA;MACA,KAAAQ,eAAA;QAAAJ,KAAA,EAAAJ,aAAA;QAAAM,QAAA,EAAAR,QAAA,CAAAH,MAAA;MAAA;IACA;IAEAc,aAAAC,aAAA;MACA,KAAAzB,cAAA,CAAA0B,OAAA,CAAAC,UAAA;QACA,MAAAC,UAAA,QAAA9B,OAAA,CAAA6B,UAAA;QACA,MAAAE,WAAA,GAAAJ,aAAA,CAAAE,UAAA;QACA,KAAAnB,SAAA;UAAAC,IAAA,EAAAmB,UAAA;UAAAlB,MAAA,EAAAmB;QAAA;MACA;IACA;IAEAC,uBAAAnB,KAAA;MACA,KAAAV,gBAAA,CAAAU,KAAA,UAAAV,gBAAA,CAAAU,KAAA;IACA;IAEAoB,eAAApB,KAAA;MACA,KAAAqB,oBAAA,CAAArB,KAAA,CAAAA,KAAA;MACA,KAAAZ,SAAA,CAAAkC,MAAA,CAAAtB,KAAA,CAAAA,KAAA;IACA;IAEAuB,UAAA;MACA,KAAAnC,SAAA;MACA,KAAAoC,eAAA;IACA;IAEAC,SAAA;MACA9B,OAAA,CAAAC,GAAA;MACA;MACA;IACA;IAEA8B,oBAAA1B,KAAA;MACA,MAAA2B,qBAAA,YAAAtC,cAAA;MACA,MAAAuC,YAAA,GAAAD,qBAAA,CAAAE,OAAA,CAAA7B,KAAA;MACA,IAAA4B,YAAA;QACAD,qBAAA,CAAAhB,IAAA,CAAAX,KAAA;MACA;QACA2B,qBAAA,CAAAL,MAAA,CAAAM,YAAA;MACA;MACA,KAAAvC,cAAA,GAAAsC,qBAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}