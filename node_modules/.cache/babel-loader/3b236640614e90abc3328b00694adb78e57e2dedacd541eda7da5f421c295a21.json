{"ast":null,"code":"import BankAccountService from '../services/bankaccount.service';\nexport default {\n  // state = les données centralisées\n  state: () => ({\n    accountAmount: 0,\n    accountTransactions: [],\n    accountNumberError: 0,\n    bankUser: 0\n  }),\n  // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\n  mutations: {\n    updateAccountAmount(state, amount) {\n      state.accountAmount = amount;\n    },\n    updateAccountTransactions(state, transactions) {\n      state.accountTransactions = transactions;\n    },\n    updateAccountNumberError(state, error) {\n      state.accountNumberError = error;\n    },\n    updateBankUser(state, account) {\n      state.bankUser = account;\n    }\n  },\n  // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\n  actions: {\n    async getAccountAmount({\n      commit\n    }, number) {\n      console.log('get account amount');\n      let response = await BankAccountService.getAccountAmount(number);\n      if (response.error === 0) {\n        commit('updateAccountAmount', response.data);\n        commit('updateAccountNumberError', 1);\n      } else {\n        console.log(response.data);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getAccountTransactions({\n      commit\n    }, number) {\n      console.log('get account transactions');\n      let response = await BankAccountService.getAccountTransactions(number);\n      if (response.error === 0) {\n        commit('updateAccountTransactions', response.data);\n        commit('updateAccountNumberError', 1);\n      } else {\n        console.log(response.data);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getAccount({\n      commit,\n      state\n    }, number) {\n      try {\n        const response = await BankAccountService.getAccount(number);\n        if (response.error === 0) {\n          commit('updateBankUser', response.data);\n          commit('updateAccountNumberError', 1);\n          state.bankUser = response.data;\n          console.log(response.data);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getTransactions({\n      commit\n    }, number) {\n      try {\n        const response = await BankAccountService.getTransactions(number);\n        if (response.error === 0) {\n          commit('updateAccountTransactions', response.data);\n          commit('updateAccountNumberError', 1);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async createWithdraw({\n      commit\n    }, withdrawalData) {\n      try {\n        const response = await BankAccountService.createWithdraw(withdrawalData);\n        if (response.error === 0) {\n          commit('updateAccountAmount', response.data.amount);\n          commit('updateAccountNumberError', 1);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async createPayment({\n      commit\n    }, paymentData) {\n      try {\n        const response = await BankAccountService.createPayment(paymentData);\n        if (response.error === 0) {\n          commit('updateAccountAmount', response.data.amount);\n          commit('updateAccountNumberError', 1);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    }\n  }\n};","map":{"version":3,"names":["BankAccountService","state","accountAmount","accountTransactions","accountNumberError","bankUser","mutations","updateAccountAmount","amount","updateAccountTransactions","transactions","updateAccountNumberError","error","updateBankUser","account","actions","getAccountAmount","commit","number","console","log","response","data","getAccountTransactions","getAccount","err","getTransactions","createWithdraw","withdrawalData","createPayment","paymentData"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/bank.js"],"sourcesContent":["import BankAccountService from '../services/bankaccount.service'\r\n\r\nexport default {\r\n    // state = les données centralisées\r\n    state: () => ({\r\n        accountAmount: 0,\r\n        accountTransactions: [],\r\n        accountNumberError: 0,\r\n        bankUser: 0\r\n    }),\r\n    // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\r\n    mutations: {\r\n        updateAccountAmount(state, amount) {\r\n            state.accountAmount = amount\r\n        },\r\n        updateAccountTransactions(state, transactions) {\r\n            state.accountTransactions = transactions\r\n        },\r\n        updateAccountNumberError(state, error) {\r\n            state.accountNumberError = error\r\n        },\r\n        updateBankUser(state, account) {\r\n            state.bankUser = account;\r\n        }\r\n    },\r\n    // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\r\n    actions: {\r\n        async getAccountAmount({commit}, number) {\r\n            console.log('get account amount');\r\n            let response = await BankAccountService.getAccountAmount(number)\r\n            if (response.error === 0) {\r\n                commit('updateAccountAmount', response.data)\r\n                commit('updateAccountNumberError', 1)\r\n            } else {\r\n                console.log(response.data)\r\n                commit('updateAccountNumberError', -1)\r\n            }\r\n        },\r\n\r\n        async getAccountTransactions({commit}, number) {\r\n            console.log('get account transactions');\r\n            let response = await BankAccountService.getAccountTransactions(number)\r\n            if (response.error === 0) {\r\n                commit('updateAccountTransactions', response.data)\r\n                commit('updateAccountNumberError', 1)\r\n            } else {\r\n                console.log(response.data)\r\n                commit('updateAccountNumberError', -1)\r\n            }\r\n        },\r\n\r\n        async getAccount({ commit, state }, number) {\r\n            try {\r\n                const response = await BankAccountService.getAccount(number);\r\n                if (response.error === 0) {\r\n                    commit('updateBankUser', response.data);\r\n                    commit('updateAccountNumberError', 1);\r\n                    state.bankUser = response.data;\r\n                    console.log(response.data)\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n\r\n        async getTransactions({ commit }, number) {\r\n            try {\r\n                const response = await BankAccountService.getTransactions(number);\r\n                if (response.error === 0) {\r\n                    commit('updateAccountTransactions', response.data);\r\n                    commit('updateAccountNumberError', 1);\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n\r\n        async createWithdraw({ commit }, withdrawalData) {\r\n            try {\r\n                const response = await BankAccountService.createWithdraw(withdrawalData);\r\n                if (response.error === 0) {\r\n                    commit('updateAccountAmount', response.data.amount);\r\n                    commit('updateAccountNumberError', 1);\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n\r\n        async createPayment({ commit }, paymentData) {\r\n            try {\r\n                const response = await BankAccountService.createPayment(paymentData);\r\n                if (response.error === 0) {\r\n                    commit('updateAccountAmount', response.data.amount);\r\n                    commit('updateAccountNumberError', 1);\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}