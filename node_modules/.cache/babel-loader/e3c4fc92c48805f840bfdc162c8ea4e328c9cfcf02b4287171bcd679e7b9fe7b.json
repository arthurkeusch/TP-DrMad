{"ast":null,"code":"import LocalSource from \"@/datasource/controller\";\nasync function getAccountAmountFromLocalSource(number) {\n  // récupération auprès de la source locale\n  return LocalSource.getAccountAmount(number);\n}\nasync function getAccountTransactionsFromLocalSource(number) {\n  // récupération auprès de la source locale\n  return LocalSource.getAccountTransactions(number);\n}\nasync function getAccountFromLocalSource(number) {\n  return LocalSource.getAccount(number);\n}\nasync function getTransactionsFromLocalSource(number) {\n  return LocalSource.getTransactions(number);\n}\nasync function createWithdrawFromLocalSource(number) {\n  return LocalSource.createWithdraw(number);\n}\nasync function createPaymentFromLocalSource(number) {\n  return LocalSource.createPayment(number);\n}\nasync function getAccountAmount(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountAmountFromLocalSource(number);\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getAccountTransactions(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountTransactionsFromLocalSource(number);\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getAccount(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountFromLocalSource(number);\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nexport default {\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n};","map":{"version":3,"names":["LocalSource","getAccountAmountFromLocalSource","number","getAccountAmount","getAccountTransactionsFromLocalSource","getAccountTransactions","getAccountFromLocalSource","getAccount","getTransactionsFromLocalSource","getTransactions","createWithdrawFromLocalSource","createWithdraw","createPaymentFromLocalSource","createPayment","response","err","error","status","data"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/services/bankaccount.service.js"],"sourcesContent":["import LocalSource from \"@/datasource/controller\";\n\nasync function getAccountAmountFromLocalSource(number) {\n  // récupération auprès de la source locale\n  return LocalSource.getAccountAmount(number)\n}\n\nasync function getAccountTransactionsFromLocalSource(number) {\n  // récupération auprès de la source locale\n  return LocalSource.getAccountTransactions(number)\n}\n\nasync function getAccountFromLocalSource(number) {\n  return LocalSource.getAccount(number)\n}\n\nasync function getTransactionsFromLocalSource(number) {\n  return LocalSource.getTransactions(number)\n}\n\nasync function createWithdrawFromLocalSource(number) {\n  return LocalSource.createWithdraw(number)\n}\n\nasync function createPaymentFromLocalSource(number) {\n  return LocalSource.createPayment(number)\n}\n\n\n\n\nasync function getAccountAmount(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountAmountFromLocalSource(number)\n  }\n    // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'  }\n  }\n  return response\n}\n\nasync function getAccountTransactions(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountTransactionsFromLocalSource(number)\n  }\n    // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'  }\n  }\n  return response\n}\n\nasync function getAccount(number) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAccountFromLocalSource(number)\n  }\n      // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'  }\n  }\n  return response\n}\n\nexport default {\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,yBAAyB;AAEjD,eAAeC,+BAA+BA,CAACC,MAAM,EAAE;EACrD;EACA,OAAOF,WAAW,CAACG,gBAAgB,CAACD,MAAM,CAAC;AAC7C;AAEA,eAAeE,qCAAqCA,CAACF,MAAM,EAAE;EAC3D;EACA,OAAOF,WAAW,CAACK,sBAAsB,CAACH,MAAM,CAAC;AACnD;AAEA,eAAeI,yBAAyBA,CAACJ,MAAM,EAAE;EAC/C,OAAOF,WAAW,CAACO,UAAU,CAACL,MAAM,CAAC;AACvC;AAEA,eAAeM,8BAA8BA,CAACN,MAAM,EAAE;EACpD,OAAOF,WAAW,CAACS,eAAe,CAACP,MAAM,CAAC;AAC5C;AAEA,eAAeQ,6BAA6BA,CAACR,MAAM,EAAE;EACnD,OAAOF,WAAW,CAACW,cAAc,CAACT,MAAM,CAAC;AAC3C;AAEA,eAAeU,4BAA4BA,CAACV,MAAM,EAAE;EAClD,OAAOF,WAAW,CAACa,aAAa,CAACX,MAAM,CAAC;AAC1C;AAKA,eAAeC,gBAAgBA,CAACD,MAAM,EAAE;EACtC,IAAIY,QAAQ,GAAG,IAAI;EACnB,IAAI;IACF;IACAA,QAAQ,GAAG,MAAMb,+BAA+B,CAACC,MAAM,CAAC;EAC1D;EACE;EACF,OAAMa,GAAG,EAAE;IACTD,QAAQ,GAAG;MAACE,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAA0C,CAAC;EACtF;EACA,OAAOJ,QAAQ;AACjB;AAEA,eAAeT,sBAAsBA,CAACH,MAAM,EAAE;EAC5C,IAAIY,QAAQ,GAAG,IAAI;EACnB,IAAI;IACF;IACAA,QAAQ,GAAG,MAAMV,qCAAqC,CAACF,MAAM,CAAC;EAChE;EACE;EACF,OAAMa,GAAG,EAAE;IACTD,QAAQ,GAAG;MAACE,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAA0C,CAAC;EACtF;EACA,OAAOJ,QAAQ;AACjB;AAEA,eAAeP,UAAUA,CAACL,MAAM,EAAE;EAChC,IAAIY,QAAQ,GAAG,IAAI;EACnB,IAAI;IACF;IACAA,QAAQ,GAAG,MAAMR,yBAAyB,CAACJ,MAAM,CAAC;EACpD;EACI;EACJ,OAAMa,GAAG,EAAE;IACTD,QAAQ,GAAG;MAACE,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEC,IAAI,EAAE;IAA0C,CAAC;EACtF;EACA,OAAOJ,QAAQ;AACjB;AAEA,eAAe;EACbX,gBAAgB;EAChBE,sBAAsB;EACtBE,UAAU;EACVE,eAAe;EACfE,cAAc;EACdE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}