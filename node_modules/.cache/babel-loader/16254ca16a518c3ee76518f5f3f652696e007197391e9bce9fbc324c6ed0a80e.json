{"ast":null,"code":"export default {\n  name: 'CheckedList',\n  props: {\n    data: Array,\n    fields: Array,\n    checked: Array,\n    itemButton: Object,\n    listButton: Object,\n    itemAmount: Boolean\n  },\n  data() {\n    return {\n      checkedViruses: []\n    };\n  },\n  computed: {\n    amountInput() {\n      return Array(this.data.length).fill('1');\n    }\n  },\n  methods: {\n    toggleCheckbox(index) {\n      this.$emit('checked-changed', index);\n    },\n    itemButtonClick(index) {\n      this.$emit('item-button-clicked', {\n        index,\n        amount: this.itemAmount ? this.amountInput[index] : undefined\n      });\n    },\n    addAllToCart() {\n      this.$emit('add-all-to-cart', this.amountInput);\n    },\n    displayItem(item) {\n      console.log(item['quantity']);\n      let fieldValue;\n      if (this.fields.includes('name')) {\n        fieldValue = item.virus ? item.virus['name'] : '';\n      }\n      if (this.fields.includes('price') && item.virus && 'price' in item.virus) {\n        fieldValue = fieldValue ? `${fieldValue} Prix: ${item.virus.price} €` : `Prix: ${item.virus.price} €`;\n      }\n      if (this.fields.includes('quantity') && 'quantity' in item) {\n        fieldValue = fieldValue ? `${fieldValue} Quantité: ${item.quantity}` : `Quantité: ${item.quantity}`;\n      }\n\n      // Utilisez fieldValue pour construire le résultat final\n      const result = fieldValue || ''; // Si fieldValue est défini, utilisez-le, sinon utilisez une chaîne vide\n\n      console.log(result);\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","Array","fields","checked","itemButton","Object","listButton","itemAmount","Boolean","checkedViruses","computed","amountInput","length","fill","methods","toggleCheckbox","index","$emit","itemButtonClick","amount","undefined","addAllToCart","displayItem","item","console","log","fieldValue","includes","virus","price","quantity","result"],"sources":["src/components/CheckedList.vue"],"sourcesContent":["<!-- CheckedList.vue -->\n<template>\n  <div>\n    <div v-for=\"(item, index) in data\" :key=\"index\">\n      <input\n          type=\"checkbox\"\n          :checked=\"checkedViruses[index]\"\n          @change=\"toggleCheckbox(index)\"\n      />\n      {{ displayItem(item) }}\n      <input\n          v-if=\"itemAmount\"\n          type=\"number\"\n          v-model=\"amountInput[index]\"\n          min=\"1\"\n      />\n      <button v-if=\"itemButton.show\" @click=\"itemButtonClick(index)\">\n        {{ itemButton.text }}\n      </button>\n    </div>\n    <button v-if=\"listButton.show\" @click=\"addAllToCart\">\n      {{ listButton.text }}\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'CheckedList',\n  props: {\n    data: Array,\n    fields: Array,\n    checked: Array,\n    itemButton: Object,\n    listButton: Object,\n    itemAmount: Boolean,\n  },\n  data() {\n    return {\n      checkedViruses: [],\n    };\n  },\n  computed: {\n    amountInput() {\n      return Array(this.data.length).fill('1');\n    },\n  },\n  methods: {\n    toggleCheckbox(index) {\n      this.$emit('checked-changed', index);\n    },\n\n    itemButtonClick(index) {\n      this.$emit('item-button-clicked', {\n        index,\n        amount: this.itemAmount ? this.amountInput[index] : undefined,\n      });\n    },\n\n    addAllToCart() {\n      this.$emit('add-all-to-cart', this.amountInput);\n    },\n\n    displayItem(item) {\n      console.log(item['quantity'])\n      let fieldValue;\n\n      if (this.fields.includes('name')) {\n        fieldValue = item.virus ? item.virus['name'] : '';\n      }\n\n      if (this.fields.includes('price') && item.virus && 'price' in item.virus) {\n        fieldValue = fieldValue ? `${fieldValue} Prix: ${item.virus.price} €` : `Prix: ${item.virus.price} €`;\n      }\n\n      if (this.fields.includes('quantity') && 'quantity' in item) {\n        fieldValue = fieldValue ? `${fieldValue} Quantité: ${item.quantity}` : `Quantité: ${item.quantity}`;\n      }\n\n// Utilisez fieldValue pour construire le résultat final\n      const result = fieldValue || ''; // Si fieldValue est défini, utilisez-le, sinon utilisez une chaîne vide\n\n      console.log(result);\n\n    },\n  },\n};\n</script>\n"],"mappings":"AA2BA;EACAA,IAAA;EACAC,KAAA;IACAC,IAAA,EAAAC,KAAA;IACAC,MAAA,EAAAD,KAAA;IACAE,OAAA,EAAAF,KAAA;IACAG,UAAA,EAAAC,MAAA;IACAC,UAAA,EAAAD,MAAA;IACAE,UAAA,EAAAC;EACA;EACAR,KAAA;IACA;MACAS,cAAA;IACA;EACA;EACAC,QAAA;IACAC,YAAA;MACA,OAAAV,KAAA,MAAAD,IAAA,CAAAY,MAAA,EAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,KAAA;MACA,KAAAC,KAAA,oBAAAD,KAAA;IACA;IAEAE,gBAAAF,KAAA;MACA,KAAAC,KAAA;QACAD,KAAA;QACAG,MAAA,OAAAZ,UAAA,QAAAI,WAAA,CAAAK,KAAA,IAAAI;MACA;IACA;IAEAC,aAAA;MACA,KAAAJ,KAAA,yBAAAN,WAAA;IACA;IAEAW,YAAAC,IAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA;MACA,IAAAG,UAAA;MAEA,SAAAxB,MAAA,CAAAyB,QAAA;QACAD,UAAA,GAAAH,IAAA,CAAAK,KAAA,GAAAL,IAAA,CAAAK,KAAA;MACA;MAEA,SAAA1B,MAAA,CAAAyB,QAAA,aAAAJ,IAAA,CAAAK,KAAA,eAAAL,IAAA,CAAAK,KAAA;QACAF,UAAA,GAAAA,UAAA,MAAAA,UAAA,UAAAH,IAAA,CAAAK,KAAA,CAAAC,KAAA,gBAAAN,IAAA,CAAAK,KAAA,CAAAC,KAAA;MACA;MAEA,SAAA3B,MAAA,CAAAyB,QAAA,8BAAAJ,IAAA;QACAG,UAAA,GAAAA,UAAA,MAAAA,UAAA,cAAAH,IAAA,CAAAO,QAAA,kBAAAP,IAAA,CAAAO,QAAA;MACA;;MAEA;MACA,MAAAC,MAAA,GAAAL,UAAA;;MAEAF,OAAA,CAAAC,GAAA,CAAAM,MAAA;IAEA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}