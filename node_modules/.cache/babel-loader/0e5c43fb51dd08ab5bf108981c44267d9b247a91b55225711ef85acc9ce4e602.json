{"ast":null,"code":"import LocalSource from \"@/datasource/controller\";\nasync function shopLoginFromLocalSource(data) {\n  // récupération auprès de la source locale\n  return LocalSource.shopLogin(data);\n}\n/*\nasync function shopLoginFromAPI(data) {\n  // a écrire quand l'API est fonctionnelle\n  return {}\n}\n */\n\nasync function getAllVirusesFromLocalSource() {\n  // récupération auprès de la source locale\n  return LocalSource.getAllViruses();\n}\n\n/*\nasync function getAllVirusesFromAPI() {\n  // a écrire quand l'API est fonctionnelle\n  return {}\n}\n*/\n\nasync function shopLogin(data) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await shopLoginFromLocalSource(data);\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getAllViruses() {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAllVirusesFromLocalSource();\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de récupérer la liste des viruses'\n    };\n  }\n  return response;\n}\nexport default {\n  shopLogin,\n  getAllViruses\n};","map":{"version":3,"names":["LocalSource","shopLoginFromLocalSource","data","shopLogin","getAllVirusesFromLocalSource","getAllViruses","response","err","error","status"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/services/shop.service.js"],"sourcesContent":["import LocalSource from \"@/datasource/controller\";\n\nasync function shopLoginFromLocalSource(data) {\n  // récupération auprès de la source locale\n  return LocalSource.shopLogin(data)\n}\n/*\nasync function shopLoginFromAPI(data) {\n  // a écrire quand l'API est fonctionnelle\n  return {}\n}\n */\n\nasync function getAllVirusesFromLocalSource() {\n  // récupération auprès de la source locale\n  return LocalSource.getAllViruses()\n}\n\n/*\nasync function getAllVirusesFromAPI() {\n  // a écrire quand l'API est fonctionnelle\n  return {}\n}\n*/\n\nasync function shopLogin(data) {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await shopLoginFromLocalSource(data)\n  }\n    // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'  }\n  }\n  return response\n}\n\n\nasync function getAllViruses() {\n  let response = null;\n  try {\n    // changer la méthode appelée quand cette fonctionnalité l'API est prête\n    response = await getAllVirusesFromLocalSource()\n  }\n  // NB: le catch n'aura lieu que pour des requête vers l'API, s'il y a une erreur réseau\n  catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de récupérer la liste des viruses'  }\n  }\n  return response\n}\n\nexport default {\n  shopLogin,\n  getAllViruses\n}"],"mappings":"AAAA,OAAOA,WAAW,MAAM,yBAAyB;AAEjD,eAAeC,wBAAwBA,CAACC,IAAI,EAAE;EAC5C;EACA,OAAOF,WAAW,CAACG,SAAS,CAACD,IAAI,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,4BAA4BA,CAAA,EAAG;EAC5C;EACA,OAAOJ,WAAW,CAACK,aAAa,CAAC,CAAC;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeF,SAASA,CAACD,IAAI,EAAE;EAC7B,IAAII,QAAQ,GAAG,IAAI;EACnB,IAAI;IACF;IACAA,QAAQ,GAAG,MAAML,wBAAwB,CAACC,IAAI,CAAC;EACjD;EACE;EACF,OAAMK,GAAG,EAAE;IACTD,QAAQ,GAAG;MAACE,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEP,IAAI,EAAE;IAA0C,CAAC;EACtF;EACA,OAAOI,QAAQ;AACjB;AAGA,eAAeD,aAAaA,CAAA,EAAG;EAC7B,IAAIC,QAAQ,GAAG,IAAI;EACnB,IAAI;IACF;IACAA,QAAQ,GAAG,MAAMF,4BAA4B,CAAC,CAAC;EACjD;EACA;EACA,OAAMG,GAAG,EAAE;IACTD,QAAQ,GAAG;MAACE,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE,GAAG;MAAEP,IAAI,EAAE;IAA+D,CAAC;EAC3G;EACA,OAAOI,QAAQ;AACjB;AAEA,eAAe;EACbH,SAAS;EACTE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}