{"ast":null,"code":"import BankAccountService from '../services/bankaccount.service';\nexport default {\n  // state = les données centralisées\n  state: () => ({\n    accountAmount: 0,\n    accountTransactions: [],\n    accountNumberError: 0\n  }),\n  // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\n  mutations: {\n    updateAccountAmount(state, amount) {\n      state.accountAmount = amount;\n    },\n    updateAccountTransactions(state, transactions) {\n      state.accountTransactions = transactions;\n    },\n    updateAccountNumberError(state, error) {\n      state.accountNumberError = error;\n    }\n  },\n  // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\n  actions: {\n    async getAccountAmount({\n      commit\n    }, number) {\n      console.log('get account amount');\n      let response = await BankAccountService.getAccountAmount(number);\n      if (response.error === 0) {\n        commit('updateAccountAmount', response.data);\n        commit('updateAccountNumberError', 1);\n      } else {\n        console.log(response.data);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getAccountTransactions({\n      commit\n    }, number) {\n      console.log('get account transactions');\n      let response = await BankAccountService.getAccountTransactions(number);\n      if (response.error === 0) {\n        commit('updateAccountTransactions', response.data);\n        commit('updateAccountNumberError', 1);\n      } else {\n        console.log(response.data);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getAccount({\n      commit\n    }, number) {\n      try {\n        const response = await BankAccountService.getAccount(number);\n        if (response.error === 0) {\n          commit('updateAccountAmount', response.data);\n          commit('updateAccountNumberError', 1);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    },\n    async getTransactions({\n      commit\n    }, number) {\n      try {\n        const response = await BankAccountService.getTransactions(number);\n        if (response.error === 0) {\n          commit('updateAccountTransactions', response.data);\n          commit('updateAccountNumberError', 1);\n        } else {\n          console.log(response.data);\n          commit('updateAccountNumberError', -1);\n        }\n      } catch (err) {\n        console.error('Erreur réseau:', err);\n        commit('updateAccountNumberError', -1);\n      }\n    }\n  }\n};","map":{"version":3,"names":["BankAccountService","state","accountAmount","accountTransactions","accountNumberError","mutations","updateAccountAmount","amount","updateAccountTransactions","transactions","updateAccountNumberError","error","actions","getAccountAmount","commit","number","console","log","response","data","getAccountTransactions","getAccount","err","getTransactions"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/bank.js"],"sourcesContent":["import BankAccountService from '../services/bankaccount.service'\r\n\r\nexport default {\r\n    // state = les données centralisées\r\n    state: () => ({\r\n        accountAmount: 0,\r\n        accountTransactions: [],\r\n        accountNumberError: 0,\r\n    }),\r\n    // mutations = fonctions synchrones pour mettre à jour le state (!!! interdit de modifier directement le state)\r\n    mutations: {\r\n        updateAccountAmount(state, amount) {\r\n            state.accountAmount = amount\r\n        },\r\n        updateAccountTransactions(state, transactions) {\r\n            state.accountTransactions = transactions\r\n        },\r\n        updateAccountNumberError(state, error) {\r\n            state.accountNumberError = error\r\n        }\r\n    },\r\n    // actions = fonctions asynchrone pour mettre à jour le state, en faisant appel aux mutations, via la fonction commit()\r\n    actions: {\r\n        async getAccountAmount({commit}, number) {\r\n            console.log('get account amount');\r\n            let response = await BankAccountService.getAccountAmount(number)\r\n            if (response.error === 0) {\r\n                commit('updateAccountAmount', response.data)\r\n                commit('updateAccountNumberError', 1)\r\n            }\r\n            else {\r\n                console.log(response.data)\r\n                commit('updateAccountNumberError', -1)\r\n            }\r\n        },\r\n\r\n        async getAccountTransactions({commit}, number) {\r\n            console.log('get account transactions');\r\n            let response = await BankAccountService.getAccountTransactions(number)\r\n            if (response.error === 0) {\r\n                commit('updateAccountTransactions', response.data)\r\n                commit('updateAccountNumberError', 1)\r\n            }\r\n            else {\r\n                console.log(response.data)\r\n                commit('updateAccountNumberError', -1)\r\n            }\r\n        },\r\n\r\n        async getAccount({ commit }, number) {\r\n            try {\r\n                const response = await BankAccountService.getAccount(number);\r\n                if (response.error === 0) {\r\n                    commit('updateAccountAmount', response.data);\r\n                    commit('updateAccountNumberError', 1);\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n\r\n        async getTransactions({ commit }, number) {\r\n            try {\r\n                const response = await BankAccountService.getTransactions(number);\r\n                if (response.error === 0) {\r\n                    commit('updateAccountTransactions', response.data);\r\n                    commit('updateAccountNumberError', 1);\r\n                } else {\r\n                    console.log(response.data);\r\n                    commit('updateAccountNumberError', -1);\r\n                }\r\n            } catch (err) {\r\n                console.error('Erreur réseau:', err);\r\n                commit('updateAccountNumberError', -1);\r\n            }\r\n        },\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}