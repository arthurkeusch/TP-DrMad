{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { bankaccounts, items, shopusers, transactions } from './data';\nimport { v4 as uuidv4 } from 'uuid';\nfunction shopLogin(data) {\n  if (!data.login || !data.password) return {\n    error: 1,\n    status: 404,\n    data: 'aucun login/pass fourni'\n  };\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {\n    error: 1,\n    status: 404,\n    data: 'login/pass incorrect'\n  };\n  if (!user.uuid) user.uuid = uuidv4();\n  return {\n    error: 0,\n    status: 200,\n    data: user\n  };\n}\nfunction getAllViruses() {\n  return {\n    error: 0,\n    data: items\n  };\n}\nfunction getAccountAmount(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  return {\n    error: 0,\n    status: 200,\n    data: account.amount\n  };\n}\nfunction getAccountTransactions(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {\n    error: 0,\n    status: 200,\n    data: trans\n  };\n}\nfunction getAccount(number) {\n  /* Permet de récupérer toutes les informations d'un compte si number correspond à un numéro valide dans le tableau bankaccounts,\n  importé du fichier datasource/data.js. Si c'est le cas, le champ data de la réponse contient l'objet correspondant dans le tableau.\n  Sinon, data contient un message du type \"numéro de compte invalide\"*/\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  return account;\n}\nfunction getTransactions(id_account) {\n  /* Permet de récupérer toutes les transactions liées à un id de compte (et pas son n°). Pour cela,\n  il faut vérifier dans les objets du tableau transactions si id_account apparaît dans le champ account\n  ou bien destination. S'il existe de tels objets, le champ data de la réponse contient un tableau de\n  ces objets. Sinon, data contient un message du type \"aucune transaction pour ce compte\".*/\n  if (!id_account) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let transAccount = transactions.find(a => a.account === id_account);\n  let transDest = transactions.find(a => a.destination === id_account);\n  if (!transAccount && !transDest) return {\n    error: 1,\n    status: 404,\n    data: 'aucune transaction pour ce compte'\n  };\n}\nfunction createWithdraw(id_account, amount) {\n  /* Permet de créer un objet transaction dans le tableau transactions, avec un montant négatif,\n  correspondant à un retrait, donc sans destination et enfin, de débiter le compte de cette somme.\n  Si id_account est valide, le champ data de la réponse contient un objet avec comme structure\n  { uuid: ..., amount: ...}. Le champ uuid a la même valeur que celle du champ uuid de la nouvelle\n  transaction. Le champ amount contient le nouveau solde disponible du compte. Si id_account n'est pas valide,\n  data contient un message du type \"id de compte invalide\". ATTENTION ! si cette fonction est appelée avec\n  succès par le store, il ne faut pas oublier ensuite de modifier le solde disponible du compte courant.*/\n  if (!id_account) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a._id === id_account);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  let newTrans = {\n    _id: generateId(),\n    amount: amount,\n    account: id_account,\n    date: new Date(),\n    uuid: uuidv4()\n  };\n  //Ajouter la transaction\n  //\n  //débiter ou créditer\n}\nfunction generateId() {\n  const byteArray = new Uint8Array(12);\n  window.crypto.getRandomValues(byteArray);\n  return Array.from(byteArray).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\nfunction createPayment(id_account, amount, destination) {\n  /* Idem que la fonction précédente mais avec une transaction dont le champ destination est défini,\n  ce qui permet de créditer le compte destinataire s'il existe. Si id_account n'est pas valide, data\n  contient un message du type \"id de compte invalide\". Si destination n'est pas valide, data contient\n  un message du type \"compte destinataire inexistant\"*/\n}\nexport default {\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n};","map":{"version":3,"names":["bankaccounts","items","shopusers","transactions","v4","uuidv4","shopLogin","data","login","password","error","status","user","find","e","uuid","getAllViruses","getAccountAmount","number","account","a","amount","getAccountTransactions","trans","filter","t","_id","getAccount","getTransactions","id_account","transAccount","transDest","destination","createWithdraw","newTrans","generateId","date","Date","byteArray","Uint8Array","window","crypto","getRandomValues","Array","from","map","byte","toString","padStart","join","createPayment"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/datasource/controller.js"],"sourcesContent":["import {bankaccounts, items, shopusers, transactions} from './data';\nimport {v4 as uuidv4} from 'uuid';\n\nfunction shopLogin(data) {\n  if ((!data.login) || (!data.password)) return {error: 1, status: 404, data: 'aucun login/pass fourni'};\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {error: 1, status: 404, data: 'login/pass incorrect'};\n  if (!user.uuid) user.uuid = uuidv4();\n  return {error: 0, status: 200, data: user};\n}\n\nfunction getAllViruses() {\n  return {error: 0, data: items};\n}\n\nfunction getAccountAmount(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  return {error: 0, status: 200, data: account.amount};\n}\n\nfunction getAccountTransactions(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {error: 0, status: 200, data: trans};\n}\n\n\nfunction getAccount(number){\n  /* Permet de récupérer toutes les informations d'un compte si number correspond à un numéro valide dans le tableau bankaccounts,\n  importé du fichier datasource/data.js. Si c'est le cas, le champ data de la réponse contient l'objet correspondant dans le tableau.\n  Sinon, data contient un message du type \"numéro de compte invalide\"*/\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  return account;\n}\n\nfunction getTransactions(id_account){\n  /* Permet de récupérer toutes les transactions liées à un id de compte (et pas son n°). Pour cela,\n  il faut vérifier dans les objets du tableau transactions si id_account apparaît dans le champ account\n  ou bien destination. S'il existe de tels objets, le champ data de la réponse contient un tableau de\n  ces objets. Sinon, data contient un message du type \"aucune transaction pour ce compte\".*/\n  if (!id_account) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let transAccount = transactions.find(a => a.account === id_account);\n  let transDest = transactions.find(a => a.destination === id_account);\n  if (!transAccount && !transDest) return {error: 1, status: 404, data: 'aucune transaction pour ce compte'};\n}\n\nfunction createWithdraw(id_account, amount){\n  /* Permet de créer un objet transaction dans le tableau transactions, avec un montant négatif,\n  correspondant à un retrait, donc sans destination et enfin, de débiter le compte de cette somme.\n  Si id_account est valide, le champ data de la réponse contient un objet avec comme structure\n  { uuid: ..., amount: ...}. Le champ uuid a la même valeur que celle du champ uuid de la nouvelle\n  transaction. Le champ amount contient le nouveau solde disponible du compte. Si id_account n'est pas valide,\n  data contient un message du type \"id de compte invalide\". ATTENTION ! si cette fonction est appelée avec\n  succès par le store, il ne faut pas oublier ensuite de modifier le solde disponible du compte courant.*/\n  if (!id_account) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a._id === id_account);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  let newTrans = {\n    _id: generateId(),\n    amount: amount,\n    account: id_account,\n    date: new Date(),\n    uuid: uuidv4()\n  };\n  //Ajouter la transaction\n  //\n  //débiter ou créditer\n}\n\nfunction generateId() {\n  const byteArray = new Uint8Array(12);\n  window.crypto.getRandomValues(byteArray);\n  return Array.from(byteArray)\n      .map(byte => byte.toString(16).padStart(2, '0'))\n      .join('');\n}\n\nfunction createPayment(id_account, amount, destination){\n  /* Idem que la fonction précédente mais avec une transaction dont le champ destination est défini,\n  ce qui permet de créditer le compte destinataire s'il existe. Si id_account n'est pas valide, data\n  contient un message du type \"id de compte invalide\". Si destination n'est pas valide, data contient\n  un message du type \"compte destinataire inexistant\"*/\n}\nexport default{\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}