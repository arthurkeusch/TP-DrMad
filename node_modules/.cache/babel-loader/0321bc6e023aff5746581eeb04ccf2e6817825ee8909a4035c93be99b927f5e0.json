{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ItemsList from '../../src/components/ItemsList.vue';\nimport BasketList from '../../src/components/BasketList.vue';\nimport { mapActions } from \"vuex\";\nexport default {\n  components: {\n    ItemsList,\n    BasketList\n  },\n  mounted() {\n    this.initPage();\n  },\n  data() {\n    return {\n      viruses: [],\n      cartItems: [],\n      checkedCartItems: []\n    };\n  },\n  methods: {\n    ...mapActions([\"getAllViruses\", \"addToCartAction\", \"removeFromCartAction\", \"clearCartAction\", \"checkoutAction\"]),\n    async initPage() {\n      await this.getAllViruses();\n      this.viruses = this.$store.state.viruses;\n      console.log(this.viruses);\n    },\n    addToCart({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      // Vérifie si le virus est déjà dans le panier\n      console.log(state.basket = []); // Vérifiez cette ligne, car elle semble réinitialiser le panier à chaque fois\n      console.log(commit);\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        // Si le virus existe, met à jour la quantité dans le panier du store\n        state.basket[existingItemIndex].quantity += quantity;\n      } else {\n        // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\n        state.basket.push({\n          virus,\n          quantity\n        });\n      }\n    },\n    addAllToCart(selectedItems) {\n      selectedItems.forEach(({\n        index,\n        amount\n      }) => {\n        this.addToCart({\n          index,\n          amount\n        });\n      });\n    },\n    toggleCartItemCheckbox(index) {\n      // Logique pour gérer la sélection/désélection des articles dans le panier\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\n    },\n    removeFromCart(index) {\n      // Logique pour retirer un article du panier\n      const selectedCartItem = this.cartItems[index];\n      // Appel de l'action du store pour retirer du panier\n      this.removeFromCartAction(selectedCartItem);\n      // Retrait également du panier local de la page\n      this.cartItems.splice(index, 1);\n    },\n    clearCart() {\n      // Logique pour vider le panier\n      this.cartItems = [];\n      this.clearCartAction();\n    },\n    checkout() {\n      // Logique pour finaliser l'achat\n      this.checkoutAction(this.cartItems);\n    }\n  }\n};","map":{"version":3,"names":["ItemsList","BasketList","mapActions","components","mounted","initPage","data","viruses","cartItems","checkedCartItems","methods","getAllViruses","$store","state","console","log","addToCart","commit","virus","quantity","basket","existingItemIndex","findIndex","item","_id","push","addAllToCart","selectedItems","forEach","index","amount","toggleCartItemCheckbox","removeFromCart","selectedCartItem","removeFromCartAction","splice","clearCart","clearCartAction","checkout","checkoutAction"],"sources":["src/views/ShopBuy.vue"],"sourcesContent":["<!-- ShopBuy.vue -->\r\n<template>\r\n  <div>\r\n    <p>{{this.$store.state.basket}}</p>\r\n    <div class=\"shop-container\">\r\n      <div class=\"items-list\">\r\n        <ItemsList\r\n            :items=\"viruses\"\r\n            @item-button-clicked=\"addToCart\"\r\n            @list-button-clicked=\"addAllToCart\"\r\n        />\r\n      </div>\r\n      <div class=\"basket-list\">\r\n        <BasketList\r\n            :items=\"cartItems\"\r\n            :checked=\"checkedCartItems\"\r\n            @checked-changed=\"toggleCartItemCheckbox\"\r\n            @item-button-clicked=\"removeFromCart\"\r\n            @list-button-clicked=\"clearCart\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemsList from '../../src/components/ItemsList.vue';\r\nimport BasketList from '../../src/components/BasketList.vue';\r\nimport { mapActions } from \"vuex\";\r\n\r\nexport default {\r\n  components: {\r\n    ItemsList,\r\n    BasketList,\r\n  },\r\n\r\n  mounted() {\r\n    this.initPage();\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      viruses: [],\r\n      cartItems: [],\r\n      checkedCartItems: [],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\"getAllViruses\", \"addToCartAction\", \"removeFromCartAction\", \"clearCartAction\", \"checkoutAction\"]),\r\n\r\n    async initPage() {\r\n      await this.getAllViruses();\r\n      this.viruses = this.$store.state.viruses;\r\n      console.log(this.viruses);\r\n    },\r\n\r\n    addToCart({ commit, state }, { virus, quantity }) {\r\n      // Vérifie si le virus est déjà dans le panier\r\n      console.log(state.basket = []);  // Vérifiez cette ligne, car elle semble réinitialiser le panier à chaque fois\r\n      console.log(commit);\r\n\r\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n\r\n      if (existingItemIndex !== -1) {\r\n        // Si le virus existe, met à jour la quantité dans le panier du store\r\n        state.basket[existingItemIndex].quantity += quantity;\r\n      } else {\r\n        // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\r\n        state.basket.push({ virus, quantity });\r\n      }\r\n    },\r\n\r\n\r\n    addAllToCart(selectedItems) {\r\n      selectedItems.forEach(({ index, amount }) => {\r\n        this.addToCart({ index, amount });\r\n      });\r\n    },\r\n\r\n    toggleCartItemCheckbox(index) {\r\n      // Logique pour gérer la sélection/désélection des articles dans le panier\r\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\r\n    },\r\n\r\n    removeFromCart(index) {\r\n      // Logique pour retirer un article du panier\r\n      const selectedCartItem = this.cartItems[index];\r\n      // Appel de l'action du store pour retirer du panier\r\n      this.removeFromCartAction(selectedCartItem);\r\n      // Retrait également du panier local de la page\r\n      this.cartItems.splice(index, 1);\r\n    },\r\n\r\n    clearCart() {\r\n      // Logique pour vider le panier\r\n      this.cartItems = [];\r\n      this.clearCartAction();\r\n    },\r\n\r\n    checkout() {\r\n      // Logique pour finaliser l'achat\r\n      this.checkoutAction(this.cartItems);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.shop-container {\r\n  display: flex;\r\n}\r\n\r\n.items-list {\r\n  flex: 1;\r\n  margin-right: 20px;\r\n}\r\n\r\n.basket-list {\r\n  flex: 1;\r\n}\r\n</style>\r\n"],"mappings":";AA0BA,OAAAA,SAAA;AACA,OAAAC,UAAA;AACA,SAAAC,UAAA;AAEA;EACAC,UAAA;IACAH,SAAA;IACAC;EACA;EAEAG,QAAA;IACA,KAAAC,QAAA;EACA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,SAAA;MACAC,gBAAA;IACA;EACA;EAEAC,OAAA;IACA,GAAAR,UAAA;IAEA,MAAAG,SAAA;MACA,WAAAM,aAAA;MACA,KAAAJ,OAAA,QAAAK,MAAA,CAAAC,KAAA,CAAAN,OAAA;MACAO,OAAA,CAAAC,GAAA,MAAAR,OAAA;IACA;IAEAS,UAAA;MAAAC,MAAA;MAAAJ;IAAA;MAAAK,KAAA;MAAAC;IAAA;MACA;MACAL,OAAA,CAAAC,GAAA,CAAAF,KAAA,CAAAO,MAAA;MACAN,OAAA,CAAAC,GAAA,CAAAE,MAAA;MAEA,MAAAI,iBAAA,GAAAR,KAAA,CAAAO,MAAA,CAAAE,SAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAL,KAAA,CAAAM,GAAA,KAAAN,KAAA,CAAAM,GAAA;MAEA,IAAAH,iBAAA;QACA;QACAR,KAAA,CAAAO,MAAA,CAAAC,iBAAA,EAAAF,QAAA,IAAAA,QAAA;MACA;QACA;QACAN,KAAA,CAAAO,MAAA,CAAAK,IAAA;UAAAP,KAAA;UAAAC;QAAA;MACA;IACA;IAGAO,aAAAC,aAAA;MACAA,aAAA,CAAAC,OAAA;QAAAC,KAAA;QAAAC;MAAA;QACA,KAAAd,SAAA;UAAAa,KAAA;UAAAC;QAAA;MACA;IACA;IAEAC,uBAAAF,KAAA;MACA;MACA,KAAApB,gBAAA,CAAAoB,KAAA,UAAApB,gBAAA,CAAAoB,KAAA;IACA;IAEAG,eAAAH,KAAA;MACA;MACA,MAAAI,gBAAA,QAAAzB,SAAA,CAAAqB,KAAA;MACA;MACA,KAAAK,oBAAA,CAAAD,gBAAA;MACA;MACA,KAAAzB,SAAA,CAAA2B,MAAA,CAAAN,KAAA;IACA;IAEAO,UAAA;MACA;MACA,KAAA5B,SAAA;MACA,KAAA6B,eAAA;IACA;IAEAC,SAAA;MACA;MACA,KAAAC,cAAA,MAAA/B,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}