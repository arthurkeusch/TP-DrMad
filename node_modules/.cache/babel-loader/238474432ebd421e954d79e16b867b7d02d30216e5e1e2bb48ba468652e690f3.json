{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: () => ({\n    basket: [],\n    shopUser: null,\n    viruses: []\n  }),\n  mutations: {\n    updateViruses(state, viruses) {\n      state.viruses = viruses;\n    },\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    },\n    addToBasket(state, {\n      virus,\n      quantity\n    }) {\n      state.basket.push({\n        virus,\n        quantity\n      });\n    },\n    updateBasketItemQuantity(state, {\n      index,\n      quantity\n    }) {\n      state.basket[index].quantity += quantity;\n    },\n    removeFromBasket(state, index) {\n      state.basket.splice(index, 1);\n    },\n    clearBasket(state) {\n      state.basket = [];\n    }\n  },\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n        this.state.shopUser = response.data;\n        console.log(\"Connexion réussie !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnexion réussie !\");\n      await router.push('/');\n    },\n    async getAllViruses({\n      commit\n    }) {\n      console.log('Récupération des virus');\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        commit('updateViruses', response.data);\n        this.state.viruses = response.data;\n        console.log(\"Récupération des virus réussie !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      // Vérifie si le virus est déjà dans le panier\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        // Si le virus existe, met à jour la quantité dans le panier du store\n        commit('updateBasketItemQuantity', {\n          index: existingItemIndex,\n          quantity\n        });\n      } else {\n        // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\n        commit('addToBasket', {\n          virus,\n          quantity\n        });\n      }\n    },\n    removeFromCartAction({\n      commit,\n      state\n    }, selectedCartItem) {\n      // Recherche de l'index de l'élément dans le panier\n      const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\n      if (index !== -1) {\n        // Si l'élément est trouvé, le retire du panier\n        commit('removeFromBasket', index);\n      }\n    },\n    clearCartAction({\n      commit\n    }) {\n      // Appel de la mutation pour vider le panier\n      commit('clearBasket');\n    },\n    checkoutAction({\n      commit,\n      state\n    }, cartItems) {\n      // Logique pour finaliser l'achat\n      console.log('Finalisation de l\\'achat avec les articles:', cartItems);\n\n      // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\n      // (envoi des données au backend, traitement des paiements, etc.)\n\n      // Simulation de la création d'une commande\n      const newOrder = {\n        _id: 'new_order_id',\n        // Remplacez par l'ID réel de la commande généré par le backend\n        items: cartItems.map(item => ({\n          item,\n          amount: item.quantity\n        })),\n        date: new Date(),\n        total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\n        status: 'finalized',\n        uuid: 'new_order_uuid' // Remplacez par l'UUID réel généré par le backend\n      };\n\n      // Mise à jour du store avec la nouvelle commande\n      commit('addToOrders', newOrder);\n\n      // Mise à jour de l'utilisateur pour ajouter la commande\n      const currentUser = shopusers.find(user => user._id === state.shopUser._id);\n      if (currentUser) {\n        currentUser.orders.push(newOrder._id);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","mutations","updateViruses","updateShopUser","user","addToBasket","virus","quantity","push","updateBasketItemQuantity","index","removeFromBasket","splice","clearBasket","actions","shopLogin","commit","data","response","error","console","log","shopLogout","getAllViruses","addToCartAction","existingItemIndex","findIndex","item","_id","removeFromCartAction","selectedCartItem","clearCartAction","checkoutAction","cartItems","newOrder","items","map","amount","date","Date","total","reduce","price","status","uuid","currentUser","shopusers","find","orders"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: () => ({\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: []\r\n    }),\r\n\r\n    mutations: {\r\n        updateViruses(state, viruses) {\r\n            state.viruses = viruses;\r\n        },\r\n\r\n        updateShopUser(state, user) {\r\n            state.shopUser = user;\r\n        },\r\n\r\n        addToBasket(state, { virus, quantity }) {\r\n            state.basket.push({ virus, quantity });\r\n        },\r\n\r\n        updateBasketItemQuantity(state, { index, quantity }) {\r\n            state.basket[index].quantity += quantity;\r\n        },\r\n\r\n        removeFromBasket(state, index) {\r\n            state.basket.splice(index, 1);\r\n        },\r\n\r\n        clearBasket(state) {\r\n            state.basket = [];\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            let response = await ShopService.shopLogin(data);\r\n            if (response.error === 0) {\r\n                commit('updateShopUser', response.data);\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connexion réussie !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnexion réussie !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses({ commit }) {\r\n            console.log('Récupération des virus');\r\n            let response = await ShopService.getAllViruses();\r\n            if (response.error === 0) {\r\n                commit('updateViruses', response.data);\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des virus réussie !\");\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        addToCartAction({ commit, state }, { virus, quantity }) {\r\n            // Vérifie si le virus est déjà dans le panier\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n\r\n            if (existingItemIndex !== -1) {\r\n                // Si le virus existe, met à jour la quantité dans le panier du store\r\n                commit('updateBasketItemQuantity', { index: existingItemIndex, quantity });\r\n            } else {\r\n                // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\r\n                commit('addToBasket', { virus, quantity });\r\n            }\r\n        },\r\n\r\n        removeFromCartAction({ commit, state }, selectedCartItem) {\r\n            // Recherche de l'index de l'élément dans le panier\r\n            const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\r\n\r\n            if (index !== -1) {\r\n                // Si l'élément est trouvé, le retire du panier\r\n                commit('removeFromBasket', index);\r\n            }\r\n        },\r\n\r\n        clearCartAction({ commit }) {\r\n            // Appel de la mutation pour vider le panier\r\n            commit('clearBasket');\r\n        },\r\n\r\n        checkoutAction({ commit, state }, cartItems) {\r\n            // Logique pour finaliser l'achat\r\n            console.log('Finalisation de l\\'achat avec les articles:', cartItems);\r\n\r\n            // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\r\n            // (envoi des données au backend, traitement des paiements, etc.)\r\n\r\n            // Simulation de la création d'une commande\r\n            const newOrder = {\r\n                _id: 'new_order_id', // Remplacez par l'ID réel de la commande généré par le backend\r\n                items: cartItems.map(item => ({ item, amount: item.quantity })),\r\n                date: new Date(),\r\n                total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\r\n                status: 'finalized',\r\n                uuid: 'new_order_uuid', // Remplacez par l'UUID réel généré par le backend\r\n            };\r\n\r\n            // Mise à jour du store avec la nouvelle commande\r\n            commit('addToOrders', newOrder);\r\n\r\n            // Mise à jour de l'utilisateur pour ajouter la commande\r\n            const currentUser = shopusers.find(user => user._id === state.shopUser._id);\r\n            if (currentUser) {\r\n                currentUser.orders.push(newOrder._id);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}