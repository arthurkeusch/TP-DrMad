{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: {\n    basket: [],\n    shopUser: null,\n    viruses: [],\n    orders: []\n  },\n  mutations: {\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    }\n  },\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n        this.state.shopUser = response.data;\n        console.log(\"Connection réussi !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnexion réussie !\");\n      await router.push('/');\n    },\n    async getAllViruses() {\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        this.state.viruses = response.data;\n        console.log(\"Récupération des virus réussie !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      console.log(commit);\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        state.basket[existingItemIndex].quantity += quantity;\n      } else {\n        state.basket.push({\n          virus,\n          quantity\n        });\n      }\n      console.log(state.basket);\n    },\n    removeFromCartAction({\n      state\n    }, index) {\n      state.basket.splice(index, 1);\n    },\n    clearCartAction() {\n      this.state.basket = [];\n    },\n    checkoutAction({\n      state\n    }, cartItems) {\n      // Logique pour finaliser l'achat\n      console.log('Finalisation de l\\'achat avec les articles:', cartItems);\n\n      // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\n      // (envoi des données au backend, traitement des paiements, etc.)\n\n      // Simulation de la création d'une commande\n      const newOrder = {\n        _id: 'new_order_id',\n        // Remplacez par l'ID réel de la commande généré par le backend\n        items: cartItems.map(item => ({\n          item,\n          amount: item.quantity\n        })),\n        date: new Date(),\n        total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\n        status: 'finalized',\n        uuid: 'new_order_uuid' // Remplacez par l'UUID réel généré par le backend\n      };\n\n      // Mise à jour du store avec la nouvelle commande\n      this.state.orders.push(newOrder);\n\n      // Mise à jour de l'utilisateur pour ajouter la commande\n      const currentUser = state.shopUser;\n      if (currentUser) {\n        currentUser.orders.push(newOrder._id);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","orders","mutations","updateShopUser","user","actions","shopLogin","commit","data","response","error","console","log","push","shopLogout","getAllViruses","addToCartAction","virus","quantity","existingItemIndex","findIndex","item","_id","removeFromCartAction","index","splice","clearCartAction","checkoutAction","cartItems","newOrder","items","map","amount","date","Date","total","reduce","price","status","uuid","currentUser"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: {\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: [],\r\n        orders: []\r\n    },\r\n\r\n    mutations: {\r\n        updateShopUser(state, user) {\r\n            state.shopUser = user;\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            let response = await ShopService.shopLogin(data)\r\n            if (response.error === 0) {\r\n                commit('updateShopUser', response.data);\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connection réussi !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data)\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnexion réussie !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses() {\r\n            let response = await ShopService.getAllViruses();\r\n            if (response.error === 0) {\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des virus réussie !\");\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        addToCartAction({ commit, state }, { virus, quantity }) {\r\n            console.log(commit);\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n            if (existingItemIndex !== -1) {\r\n                state.basket[existingItemIndex].quantity += quantity;\r\n            } else {\r\n                state.basket.push({ virus, quantity });\r\n            }\r\n            console.log(state.basket);\r\n        },\r\n\r\n        removeFromCartAction({ state }, index) {\r\n            state.basket.splice(index, 1);\r\n        },\r\n\r\n        clearCartAction() {\r\n            this.state.basket = [];\r\n        },\r\n\r\n        checkoutAction({ state }, cartItems) {\r\n            // Logique pour finaliser l'achat\r\n            console.log('Finalisation de l\\'achat avec les articles:', cartItems);\r\n\r\n            // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\r\n            // (envoi des données au backend, traitement des paiements, etc.)\r\n\r\n            // Simulation de la création d'une commande\r\n            const newOrder = {\r\n                _id: 'new_order_id', // Remplacez par l'ID réel de la commande généré par le backend\r\n                items: cartItems.map(item => ({ item, amount: item.quantity })),\r\n                date: new Date(),\r\n                total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\r\n                status: 'finalized',\r\n                uuid: 'new_order_uuid', // Remplacez par l'UUID réel généré par le backend\r\n            };\r\n\r\n            // Mise à jour du store avec la nouvelle commande\r\n            this.state.orders.push(newOrder);\r\n\r\n            // Mise à jour de l'utilisateur pour ajouter la commande\r\n            const currentUser = state.shopUser;\r\n            if (currentUser) {\r\n                currentUser.orders.push(newOrder._id);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}