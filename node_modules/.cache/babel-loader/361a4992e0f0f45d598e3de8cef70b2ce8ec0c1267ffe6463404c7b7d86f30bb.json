{"ast":null,"code":"import { ref } from 'vue';\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'BankOperation',\n  methods() {\n    const amount = ref('');\n    const hasRecipient = ref(false);\n    const recipient = ref('');\n    const operationResult = ref('');\n    const validateOperation = () => {\n      if (hasRecipient) {\n        console.log(\"Destinataire sélectionné:\", recipient.value);\n      } else {\n        console.log(\"Pas de destinataire sélectionné.\");\n      }\n\n      // Exemple de résultat après validation\n      operationResult.value = `L'opération est validée avec le n° : ${generateUuid()}. Vous pouvez la retrouver dans l'historique.`;\n\n      // Réinitialiser les champs\n      amount.value = '';\n      hasRecipient.value = false;\n      recipient.value = '';\n    };\n    const generateUuid = () => {\n      // Logique de génération d'UUID\n      // Cela dépend de votre application, vous pouvez utiliser une bibliothèque comme uuid ou simplement Math.random()\n\n      // Exemple simple avec Math.random() pour illustrer\n      return `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;\n    };\n\n    // Accéder à l'action getAccount depuis le store\n    const {\n      getAccount\n    } = mapActions(['getAccount']);\n\n    // Retourner les données et méthodes nécessaires\n    return {\n      amount,\n      hasRecipient,\n      recipient,\n      operationResult,\n      validateOperation,\n      generateUuid,\n      getAccount\n    };\n  }\n};","map":{"version":3,"names":["ref","mapActions","name","methods","amount","hasRecipient","recipient","operationResult","validateOperation","console","log","value","generateUuid","Math","random","toString","substr","getAccount"],"sources":["src/views/BankAccountView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Opération</h1>\n    <label for=\"amount\">Montant:</label>\n    <input v-model=\"amount\" type=\"number\" id=\"amount\" />\n\n    <div>\n      <input type=\"checkbox\" id=\"recipientCheckbox\" v-model=\"hasRecipient\" />\n      <label for=\"recipientCheckbox\">Destinataire</label>\n\n      <input v-if=\"hasRecipient\" v-model=\"recipient\" type=\"text\" id=\"recipient\" placeholder=\"Destinataire\" />\n    </div>\n\n    <button @click=\"validateOperation\">Valider</button>\n\n    <div v-if=\"operationResult\">\n      {{ operationResult }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport { mapActions } from 'vuex';\n\nexport default {\n  name: 'BankOperation',\n\n  methods() {\n    const amount = ref('');\n    const hasRecipient = ref(false);\n    const recipient = ref('');\n    const operationResult = ref('');\n\n    const validateOperation = () => {\n      if (hasRecipient) {\n        console.log(\"Destinataire sélectionné:\", recipient.value);\n      } else {\n        console.log(\"Pas de destinataire sélectionné.\");\n      }\n\n      // Exemple de résultat après validation\n      operationResult.value = `L'opération est validée avec le n° : ${generateUuid()}. Vous pouvez la retrouver dans l'historique.`;\n\n      // Réinitialiser les champs\n      amount.value = '';\n      hasRecipient.value = false;\n      recipient.value = '';\n    };\n\n    const generateUuid = () => {\n      // Logique de génération d'UUID\n      // Cela dépend de votre application, vous pouvez utiliser une bibliothèque comme uuid ou simplement Math.random()\n\n      // Exemple simple avec Math.random() pour illustrer\n      return `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;\n    };\n\n    // Accéder à l'action getAccount depuis le store\n    const { getAccount } = mapActions(['getAccount']);\n\n    // Retourner les données et méthodes nécessaires\n    return {\n      amount,\n      hasRecipient,\n      recipient,\n      operationResult,\n      validateOperation,\n      generateUuid,\n      getAccount,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Ajouter des styles au besoin */\n</style>"],"mappings":"AAsBA,SAAAA,GAAA;AACA,SAAAC,UAAA;AAEA;EACAC,IAAA;EAEAC,QAAA;IACA,MAAAC,MAAA,GAAAJ,GAAA;IACA,MAAAK,YAAA,GAAAL,GAAA;IACA,MAAAM,SAAA,GAAAN,GAAA;IACA,MAAAO,eAAA,GAAAP,GAAA;IAEA,MAAAQ,iBAAA,GAAAA,CAAA;MACA,IAAAH,YAAA;QACAI,OAAA,CAAAC,GAAA,8BAAAJ,SAAA,CAAAK,KAAA;MACA;QACAF,OAAA,CAAAC,GAAA;MACA;;MAEA;MACAH,eAAA,CAAAI,KAAA,2CAAAC,YAAA;;MAEA;MACAR,MAAA,CAAAO,KAAA;MACAN,YAAA,CAAAM,KAAA;MACAL,SAAA,CAAAK,KAAA;IACA;IAEA,MAAAC,YAAA,GAAAA,CAAA;MACA;MACA;;MAEA;MACA,UAAAC,IAAA,CAAAC,MAAA,GAAAC,QAAA,KAAAC,MAAA,UAAAH,IAAA,CAAAC,MAAA,GAAAC,QAAA,KAAAC,MAAA,UAAAH,IAAA,CAAAC,MAAA,GAAAC,QAAA,KAAAC,MAAA;IACA;;IAEA;IACA;MAAAC;IAAA,IAAAhB,UAAA;;IAEA;IACA;MACAG,MAAA;MACAC,YAAA;MACAC,SAAA;MACAC,eAAA;MACAC,iBAAA;MACAI,YAAA;MACAK;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}