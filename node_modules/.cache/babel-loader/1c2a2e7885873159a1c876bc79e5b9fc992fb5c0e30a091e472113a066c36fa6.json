{"ast":null,"code":"import { items, shopusers, bankaccounts, transactions } from './data';\nimport { v4 as uuidv4 } from 'uuid';\nfunction shopLogin(data) {\n  if (!data.login || !data.password) return {\n    error: 1,\n    status: 404,\n    data: 'aucun login/pass fourni'\n  };\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {\n    error: 1,\n    status: 404,\n    data: 'login/pass incorrect'\n  };\n  if (!user.uuid) user.uuid = uuidv4();\n  return {\n    error: 0,\n    status: 200,\n    data: user\n  };\n}\nfunction getAllViruses() {\n  return {\n    error: 0,\n    data: items\n  };\n}\nfunction getAccountAmount(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  return {\n    error: 0,\n    status: 200,\n    data: account.amount\n  };\n}\nfunction getAccountTransactions(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {\n    error: 0,\n    status: 200,\n    data: trans\n  };\n}\n\n/* Permet de récupérer toutes les informations d'un compte si number correspond à un numéro valide dans le tableau bankaccounts,\nimporté du fichier datasource/data.js. Si c'est le cas, le champ data de la réponse contient l'objet correspondant dans le tableau.\nSinon, data contient un message du type \"numéro de compte invalide\"*/\nfunction getAccount(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  return account;\n}\nfunction getTransactions(id_account) {\n  /*permet de récupérer toutes les transactions liées à un id de compte (et pas son n°). Pour cela,\n  il faut vérifier dans les objets du tableau transactions si id_account apparaît dans le champ account\n  ou bien destination . S'il existe de tels objets, le champ data de la réponse\n  contient un tableau de ces objets. Sinon, data contient un message du type \"aucune transaction pour ce\n  compte\".*/\n}\nexport default {\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount\n};","map":{"version":3,"names":["items","shopusers","bankaccounts","transactions","v4","uuidv4","shopLogin","data","login","password","error","status","user","find","e","uuid","getAllViruses","getAccountAmount","number","account","a","amount","getAccountTransactions","trans","filter","t","_id","getAccount","getTransactions","id_account"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/datasource/controller.js"],"sourcesContent":["import { items, shopusers, bankaccounts, transactions } from './data';\nimport {v4 as uuidv4} from 'uuid';\n\nfunction shopLogin(data) {\n  if ((!data.login) || (!data.password)) return {error: 1, status: 404, data: 'aucun login/pass fourni'};\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {error: 1, status: 404, data: 'login/pass incorrect'};\n  if (!user.uuid) user.uuid = uuidv4();\n  return {error: 0, status: 200, data: user};\n}\n\nfunction getAllViruses() {\n  return {error: 0, data: items};\n}\n\nfunction getAccountAmount(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  return {error: 0, status: 200, data: account.amount};\n}\n\nfunction getAccountTransactions(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {error: 0, status: 200, data: trans};\n}\n\n/* Permet de récupérer toutes les informations d'un compte si number correspond à un numéro valide dans le tableau bankaccounts,\nimporté du fichier datasource/data.js. Si c'est le cas, le champ data de la réponse contient l'objet correspondant dans le tableau.\nSinon, data contient un message du type \"numéro de compte invalide\"*/\nfunction getAccount(number){\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  return account;\n}\n\nfunction getTransactions(id_account){\n  /*permet de récupérer toutes les transactions liées à un id de compte (et pas son n°). Pour cela,\n  il faut vérifier dans les objets du tableau transactions si id_account apparaît dans le champ account\n  ou bien destination . S'il existe de tels objets, le champ data de la réponse\n  contient un tableau de ces objets. Sinon, data contient un message du type \"aucune transaction pour ce\n  compte\".*/\n}\nexport default{\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}