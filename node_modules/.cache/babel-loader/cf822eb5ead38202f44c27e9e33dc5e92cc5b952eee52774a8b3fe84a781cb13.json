{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: () => ({\n    basket: [],\n    shopUser: null,\n    viruses: [],\n    orders: []\n  }),\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      console.log(commit);\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        this.state.shopUser = response.data;\n        console.log(\"Connexion réussie !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnexion réussie !\");\n      await router.push('/');\n    },\n    async getAllViruses() {\n      console.log('Récupération des virus');\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        this.state.viruses = response.data;\n        console.log(\"Récupération des virus réussie !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      // Vérifie si le virus est déjà dans le panier\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        // Si le virus existe, met à jour la quantité dans le panier du store\n        this.state.basket[existingItemIndex].quantity += quantity;\n      } else {\n        // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\n        this.state.basket.push({\n          virus,\n          quantity\n        });\n      }\n    },\n    removeFromCartAction({\n      state\n    }, selectedCartItem) {\n      // Recherche de l'index de l'élément dans le panier\n      const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\n      if (index !== -1) {\n        // Si l'élément est trouvé, le retire du panier\n        this.state.basket.splice(index, 1);\n      }\n    },\n    clearCartAction() {\n      // Vide le panier directement\n      this.state.basket = [];\n    },\n    checkoutAction({\n      state\n    }, cartItems) {\n      // Logique pour finaliser l'achat\n      console.log('Finalisation de l\\'achat avec les articles:', cartItems);\n\n      // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\n      // (envoi des données au backend, traitement des paiements, etc.)\n\n      // Simulation de la création d'une commande\n      const newOrder = {\n        _id: 'new_order_id',\n        // Remplacez par l'ID réel de la commande généré par le backend\n        items: cartItems.map(item => ({\n          item,\n          amount: item.quantity\n        })),\n        date: new Date(),\n        total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\n        status: 'finalized',\n        uuid: 'new_order_uuid' // Remplacez par l'UUID réel généré par le backend\n      };\n\n      // Mise à jour du store avec la nouvelle commande\n      this.state.orders.push(newOrder);\n\n      // Mise à jour de l'utilisateur pour ajouter la commande\n      const currentUser = state.shopUser;\n      if (currentUser) {\n        currentUser.orders.push(newOrder._id);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","orders","actions","shopLogin","commit","data","console","log","response","error","push","shopLogout","getAllViruses","addToCartAction","virus","quantity","existingItemIndex","findIndex","item","_id","removeFromCartAction","selectedCartItem","index","splice","clearCartAction","checkoutAction","cartItems","newOrder","items","map","amount","date","Date","total","reduce","price","status","uuid","currentUser"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: () => ({\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: [],\r\n        orders: []\r\n    }),\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            console.log(commit);\r\n            let response = await ShopService.shopLogin(data);\r\n            if (response.error === 0) {\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connexion réussie !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnexion réussie !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses() {\r\n            console.log('Récupération des virus');\r\n            let response = await ShopService.getAllViruses();\r\n            if (response.error === 0) {\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des virus réussie !\");\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        addToCartAction({ state }, { virus, quantity }) {\r\n            // Vérifie si le virus est déjà dans le panier\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n\r\n            if (existingItemIndex !== -1) {\r\n                // Si le virus existe, met à jour la quantité dans le panier du store\r\n                this.state.basket[existingItemIndex].quantity += quantity;\r\n            } else {\r\n                // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\r\n                this.state.basket.push({ virus, quantity });\r\n            }\r\n        },\r\n\r\n        removeFromCartAction({ state }, selectedCartItem) {\r\n            // Recherche de l'index de l'élément dans le panier\r\n            const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\r\n\r\n            if (index !== -1) {\r\n                // Si l'élément est trouvé, le retire du panier\r\n                this.state.basket.splice(index, 1);\r\n            }\r\n        },\r\n\r\n        clearCartAction() {\r\n            // Vide le panier directement\r\n            this.state.basket = [];\r\n        },\r\n\r\n        checkoutAction({ state }, cartItems) {\r\n            // Logique pour finaliser l'achat\r\n            console.log('Finalisation de l\\'achat avec les articles:', cartItems);\r\n\r\n            // Vous pouvez ajouter ici la logique spécifique pour finaliser l'achat\r\n            // (envoi des données au backend, traitement des paiements, etc.)\r\n\r\n            // Simulation de la création d'une commande\r\n            const newOrder = {\r\n                _id: 'new_order_id', // Remplacez par l'ID réel de la commande généré par le backend\r\n                items: cartItems.map(item => ({ item, amount: item.quantity })),\r\n                date: new Date(),\r\n                total: cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0),\r\n                status: 'finalized',\r\n                uuid: 'new_order_uuid', // Remplacez par l'UUID réel généré par le backend\r\n            };\r\n\r\n            // Mise à jour du store avec la nouvelle commande\r\n            this.state.orders.push(newOrder);\r\n\r\n            // Mise à jour de l'utilisateur pour ajouter la commande\r\n            const currentUser = state.shopUser;\r\n            if (currentUser) {\r\n                currentUser.orders.push(newOrder._id);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}