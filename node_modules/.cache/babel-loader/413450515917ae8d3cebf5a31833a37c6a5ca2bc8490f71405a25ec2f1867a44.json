{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: {\n    basket: [],\n    shopUser: null,\n    viruses: [],\n    orders: []\n  },\n  mutations: {\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    }\n  },\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n        this.state.shopUser = response.data;\n        console.log(\"Connection réussi !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnexion réussie !\");\n      await router.push('/');\n    },\n    async getAllViruses() {\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        this.state.viruses = response.data;\n        console.log(\"Récupération des virus réussie !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      console.log(commit);\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        state.basket[existingItemIndex].quantity += quantity;\n      } else {\n        state.basket.push({\n          virus,\n          quantity\n        });\n      }\n      console.log(state.basket);\n    },\n    removeFromCartAction({\n      state\n    }, index) {\n      state.basket.splice(index, 1);\n    },\n    clearCartAction() {\n      this.state.basket = [];\n    },\n    async checkoutAction({\n      state\n    }, cartItems) {\n      try {\n        // Construire la liste d'articles dans le format requis\n        const items = cartItems.map(item => ({\n          item: {\n            name: item.virus.name,\n            description: item.virus.description,\n            price: item.virus.price,\n            promotion: item.virus.promotion,\n            object: item.virus.object\n          },\n          amount: item.quantity\n        }));\n\n        // Calculer le total\n        const total = cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0);\n\n        // Générer un UUID unique pour la commande (utilisez une bibliothèque appropriée pour générer un UUID v4)\n        const uuid = 'new_order_uuid'; // Remplacez par l'UUID réel généré par le backend\n\n        // Créer la nouvelle commande\n        const newOrder = {\n          items,\n          date: new Date(),\n          total,\n          status: 'waiting_payment',\n          // Vous pouvez ajuster l'état selon vos besoins\n          uuid\n        };\n\n        // Envoyer la commande au backend (remplacez cela par l'appel réel au backend)\n        const response = await ShopService.createOrder(newOrder);\n        if (response.error === 0) {\n          // Mise à jour du store avec la nouvelle commande\n          this.state.orders.push(response.data);\n\n          // Mise à jour de l'utilisateur pour ajouter la commande\n          const currentUser = state.shopUser;\n          if (currentUser) {\n            currentUser.orders.push(response.data._id);\n          }\n\n          // Effacer le panier après la commande\n          this.clearCartAction();\n          console.log('Commande créée avec succès:', response.data);\n        } else {\n          console.error('Erreur lors de la création de la commande:', response.data);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la création de la commande:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","orders","mutations","updateShopUser","user","actions","shopLogin","commit","data","response","error","console","log","push","shopLogout","getAllViruses","addToCartAction","virus","quantity","existingItemIndex","findIndex","item","_id","removeFromCartAction","index","splice","clearCartAction","checkoutAction","cartItems","items","map","name","description","price","promotion","object","amount","total","reduce","uuid","newOrder","date","Date","status","createOrder","currentUser"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: {\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: [],\r\n        orders: []\r\n    },\r\n\r\n    mutations: {\r\n        updateShopUser(state, user) {\r\n            state.shopUser = user;\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            let response = await ShopService.shopLogin(data)\r\n            if (response.error === 0) {\r\n                commit('updateShopUser', response.data);\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connection réussi !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data)\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnexion réussie !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses() {\r\n            let response = await ShopService.getAllViruses();\r\n            if (response.error === 0) {\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des virus réussie !\");\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        addToCartAction({ commit, state }, { virus, quantity }) {\r\n            console.log(commit);\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n            if (existingItemIndex !== -1) {\r\n                state.basket[existingItemIndex].quantity += quantity;\r\n            } else {\r\n                state.basket.push({ virus, quantity });\r\n            }\r\n            console.log(state.basket);\r\n        },\r\n\r\n        removeFromCartAction({ state }, index) {\r\n            state.basket.splice(index, 1);\r\n        },\r\n\r\n        clearCartAction() {\r\n            this.state.basket = [];\r\n        },\r\n\r\n        async checkoutAction({ state }, cartItems) {\r\n            try {\r\n                // Construire la liste d'articles dans le format requis\r\n                const items = cartItems.map(item => ({\r\n                    item: {\r\n                        name: item.virus.name,\r\n                        description: item.virus.description,\r\n                        price: item.virus.price,\r\n                        promotion: item.virus.promotion,\r\n                        object: item.virus.object\r\n                    },\r\n                    amount: item.quantity,\r\n                }));\r\n\r\n                // Calculer le total\r\n                const total = cartItems.reduce((total, item) => total + item.virus.price * item.quantity, 0);\r\n\r\n                // Générer un UUID unique pour la commande (utilisez une bibliothèque appropriée pour générer un UUID v4)\r\n                const uuid = 'new_order_uuid'; // Remplacez par l'UUID réel généré par le backend\r\n\r\n                // Créer la nouvelle commande\r\n                const newOrder = {\r\n                    items,\r\n                    date: new Date(),\r\n                    total,\r\n                    status: 'waiting_payment', // Vous pouvez ajuster l'état selon vos besoins\r\n                    uuid,\r\n                };\r\n\r\n                // Envoyer la commande au backend (remplacez cela par l'appel réel au backend)\r\n                const response = await ShopService.createOrder(newOrder);\r\n\r\n                if (response.error === 0) {\r\n                    // Mise à jour du store avec la nouvelle commande\r\n                    this.state.orders.push(response.data);\r\n\r\n                    // Mise à jour de l'utilisateur pour ajouter la commande\r\n                    const currentUser = state.shopUser;\r\n                    if (currentUser) {\r\n                        currentUser.orders.push(response.data._id);\r\n                    }\r\n\r\n                    // Effacer le panier après la commande\r\n                    this.clearCartAction();\r\n\r\n                    console.log('Commande créée avec succès:', response.data);\r\n                } else {\r\n                    console.error('Erreur lors de la création de la commande:', response.data);\r\n                }\r\n            } catch (error) {\r\n                console.error('Erreur lors de la création de la commande:', error);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}