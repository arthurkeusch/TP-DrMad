{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ItemsList from '../../src/components/ItemsList.vue';\nimport BasketList from '../../src/components/BasketList.vue';\nimport { mapActions } from \"vuex\";\nexport default {\n  components: {\n    ItemsList,\n    BasketList\n  },\n  mounted() {\n    this.initPage();\n  },\n  data() {\n    return {\n      viruses: [],\n      cartItems: [],\n      checkedViruses: [],\n      checkedCartItems: []\n    };\n  },\n  methods: {\n    ...mapActions([\"getAllViruses\", \"addToCartAction\", \"removeFromCartAction\", \"clearCartAction\", \"checkoutAction\"]),\n    async initPage() {\n      await this.getAllViruses();\n      this.viruses = this.$store.state.viruses;\n      console.log(this.viruses);\n    },\n    toggleVirusCheckbox(index) {\n      const isChecked = this.checkedViruses.includes(index);\n      if (!isChecked) {\n        this.checkedViruses.push(index);\n      } else {\n        const indexOfVirus = this.checkedViruses.indexOf(index);\n        this.checkedViruses.splice(indexOfVirus, 1);\n      }\n    },\n    addToCart({\n      index,\n      amount\n    }) {\n      if (!amount || isNaN(parseInt(amount))) {\n        alert(`Veuillez sélectionner une quantité valide !\\nQuantité actuelle : ${amount}`);\n        return;\n      }\n      const selectedVirus = this.viruses[index];\n      const existingItemIndex = this.cartItems.findIndex(item => item.virus._id === selectedVirus._id);\n      if (existingItemIndex !== -1) {\n        // Mettez à jour la quantité dans le panier local de la page\n        this.cartItems[existingItemIndex].quantity = parseInt(this.cartItems[existingItemIndex].quantity) + parseInt(amount);\n      } else {\n        // Ajoutez le virus avec la quantité spécifiée dans le panier local de la page\n        this.cartItems.push({\n          virus: selectedVirus,\n          quantity: parseInt(amount)\n        });\n      }\n\n      // Appel de l'action du store pour ajouter au panier\n      this.addToCartAction({\n        virus: selectedVirus,\n        quantity: parseInt(amount)\n      });\n    },\n    addAllToCart(selectedItems) {\n      selectedItems.forEach(({\n        index,\n        amount\n      }) => {\n        this.addToCart({\n          index,\n          amount\n        });\n      });\n    },\n    toggleCartItemCheckbox(index) {\n      // Logique pour gérer la sélection/désélection des articles dans le panier\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\n    },\n    removeFromCart(index) {\n      // Logique pour retirer un article du panier\n      const selectedCartItem = this.cartItems[index];\n      // Appel de l'action du store pour retirer du panier\n      this.removeFromCartAction(selectedCartItem);\n      // Retrait également du panier local de la page\n      this.cartItems.splice(index, 1);\n    },\n    clearCart() {\n      // Logique pour vider le panier\n      this.cartItems = [];\n      this.clearCartAction();\n    },\n    checkout() {\n      // Logique pour finaliser l'achat\n      this.checkoutAction(this.cartItems);\n    }\n  }\n};","map":{"version":3,"names":["ItemsList","BasketList","mapActions","components","mounted","initPage","data","viruses","cartItems","checkedViruses","checkedCartItems","methods","getAllViruses","$store","state","console","log","toggleVirusCheckbox","index","isChecked","includes","push","indexOfVirus","indexOf","splice","addToCart","amount","isNaN","parseInt","alert","selectedVirus","existingItemIndex","findIndex","item","virus","_id","quantity","addToCartAction","addAllToCart","selectedItems","forEach","toggleCartItemCheckbox","removeFromCart","selectedCartItem","removeFromCartAction","clearCart","clearCartAction","checkout","checkoutAction"],"sources":["src/views/ShopBuy.vue"],"sourcesContent":["<!-- ShopBuy.vue -->\r\n<template>\r\n  <div>\r\n    <p>{{this.checkedViruses}}</p>\r\n    <div class=\"shop-container\">\r\n      <div class=\"items-list\">\r\n        <ItemsList\r\n            :items=\"viruses\"\r\n            :checked=\"checkedViruses\"\r\n            @checked-changed=\"toggleVirusCheckbox\"\r\n            @item-button-clicked=\"addToCart\"\r\n            @list-button-clicked=\"checkout\"\r\n        />\r\n      </div>\r\n      <div class=\"basket-list\">\r\n        <BasketList\r\n            :items=\"cartItems\"\r\n            :checked=\"checkedCartItems\"\r\n            @checked-changed=\"toggleCartItemCheckbox\"\r\n            @item-button-clicked=\"removeFromCart\"\r\n            @list-button-clicked=\"clearCart\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemsList from '../../src/components/ItemsList.vue';\r\nimport BasketList from '../../src/components/BasketList.vue';\r\nimport { mapActions } from \"vuex\";\r\n\r\nexport default {\r\n  components: {\r\n    ItemsList,\r\n    BasketList,\r\n  },\r\n\r\n  mounted() {\r\n    this.initPage();\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      viruses: [],\r\n      cartItems: [],\r\n      checkedViruses: [],\r\n      checkedCartItems: [],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\"getAllViruses\", \"addToCartAction\", \"removeFromCartAction\", \"clearCartAction\", \"checkoutAction\"]),\r\n\r\n    async initPage() {\r\n      await this.getAllViruses();\r\n      this.viruses = this.$store.state.viruses;\r\n      console.log(this.viruses);\r\n    },\r\n\r\n    toggleVirusCheckbox(index) {\r\n      const isChecked = this.checkedViruses.includes(index);\r\n      if (!isChecked) {\r\n        this.checkedViruses.push(index);\r\n      } else {\r\n        const indexOfVirus = this.checkedViruses.indexOf(index);\r\n        this.checkedViruses.splice(indexOfVirus, 1);\r\n      }\r\n    },\r\n\r\n    addToCart({ index, amount }) {\r\n      if (!amount || isNaN(parseInt(amount))) {\r\n        alert(`Veuillez sélectionner une quantité valide !\\nQuantité actuelle : ${amount}`);\r\n        return;\r\n      }\r\n\r\n      const selectedVirus = this.viruses[index];\r\n      const existingItemIndex = this.cartItems.findIndex(item => item.virus._id === selectedVirus._id);\r\n\r\n      if (existingItemIndex !== -1) {\r\n        // Mettez à jour la quantité dans le panier local de la page\r\n        this.cartItems[existingItemIndex].quantity = parseInt(this.cartItems[existingItemIndex].quantity) + parseInt(amount);\r\n      } else {\r\n        // Ajoutez le virus avec la quantité spécifiée dans le panier local de la page\r\n        this.cartItems.push({ virus: selectedVirus, quantity: parseInt(amount) });\r\n      }\r\n\r\n      // Appel de l'action du store pour ajouter au panier\r\n      this.addToCartAction({ virus: selectedVirus, quantity: parseInt(amount) });\r\n    },\r\n\r\n    addAllToCart(selectedItems) {\r\n      selectedItems.forEach(({ index, amount }) => {\r\n        this.addToCart({ index, amount });\r\n      });\r\n    },\r\n\r\n    toggleCartItemCheckbox(index) {\r\n      // Logique pour gérer la sélection/désélection des articles dans le panier\r\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\r\n    },\r\n\r\n    removeFromCart(index) {\r\n      // Logique pour retirer un article du panier\r\n      const selectedCartItem = this.cartItems[index];\r\n      // Appel de l'action du store pour retirer du panier\r\n      this.removeFromCartAction(selectedCartItem);\r\n      // Retrait également du panier local de la page\r\n      this.cartItems.splice(index, 1);\r\n    },\r\n\r\n    clearCart() {\r\n      // Logique pour vider le panier\r\n      this.cartItems = [];\r\n      this.clearCartAction();\r\n    },\r\n\r\n    checkout() {\r\n      // Logique pour finaliser l'achat\r\n      this.checkoutAction(this.cartItems);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.shop-container {\r\n  display: flex;\r\n}\r\n\r\n.items-list {\r\n  flex: 1;\r\n  margin-right: 20px;\r\n}\r\n\r\n.basket-list {\r\n  flex: 1;\r\n}\r\n</style>\r\n"],"mappings":";AA4BA,OAAAA,SAAA;AACA,OAAAC,UAAA;AACA,SAAAC,UAAA;AAEA;EACAC,UAAA;IACAH,SAAA;IACAC;EACA;EAEAG,QAAA;IACA,KAAAC,QAAA;EACA;EAEAC,KAAA;IACA;MACAC,OAAA;MACAC,SAAA;MACAC,cAAA;MACAC,gBAAA;IACA;EACA;EAEAC,OAAA;IACA,GAAAT,UAAA;IAEA,MAAAG,SAAA;MACA,WAAAO,aAAA;MACA,KAAAL,OAAA,QAAAM,MAAA,CAAAC,KAAA,CAAAP,OAAA;MACAQ,OAAA,CAAAC,GAAA,MAAAT,OAAA;IACA;IAEAU,oBAAAC,KAAA;MACA,MAAAC,SAAA,QAAAV,cAAA,CAAAW,QAAA,CAAAF,KAAA;MACA,KAAAC,SAAA;QACA,KAAAV,cAAA,CAAAY,IAAA,CAAAH,KAAA;MACA;QACA,MAAAI,YAAA,QAAAb,cAAA,CAAAc,OAAA,CAAAL,KAAA;QACA,KAAAT,cAAA,CAAAe,MAAA,CAAAF,YAAA;MACA;IACA;IAEAG,UAAA;MAAAP,KAAA;MAAAQ;IAAA;MACA,KAAAA,MAAA,IAAAC,KAAA,CAAAC,QAAA,CAAAF,MAAA;QACAG,KAAA,qEAAAH,MAAA;QACA;MACA;MAEA,MAAAI,aAAA,QAAAvB,OAAA,CAAAW,KAAA;MACA,MAAAa,iBAAA,QAAAvB,SAAA,CAAAwB,SAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAC,KAAA,CAAAC,GAAA,KAAAL,aAAA,CAAAK,GAAA;MAEA,IAAAJ,iBAAA;QACA;QACA,KAAAvB,SAAA,CAAAuB,iBAAA,EAAAK,QAAA,GAAAR,QAAA,MAAApB,SAAA,CAAAuB,iBAAA,EAAAK,QAAA,IAAAR,QAAA,CAAAF,MAAA;MACA;QACA;QACA,KAAAlB,SAAA,CAAAa,IAAA;UAAAa,KAAA,EAAAJ,aAAA;UAAAM,QAAA,EAAAR,QAAA,CAAAF,MAAA;QAAA;MACA;;MAEA;MACA,KAAAW,eAAA;QAAAH,KAAA,EAAAJ,aAAA;QAAAM,QAAA,EAAAR,QAAA,CAAAF,MAAA;MAAA;IACA;IAEAY,aAAAC,aAAA;MACAA,aAAA,CAAAC,OAAA;QAAAtB,KAAA;QAAAQ;MAAA;QACA,KAAAD,SAAA;UAAAP,KAAA;UAAAQ;QAAA;MACA;IACA;IAEAe,uBAAAvB,KAAA;MACA;MACA,KAAAR,gBAAA,CAAAQ,KAAA,UAAAR,gBAAA,CAAAQ,KAAA;IACA;IAEAwB,eAAAxB,KAAA;MACA;MACA,MAAAyB,gBAAA,QAAAnC,SAAA,CAAAU,KAAA;MACA;MACA,KAAA0B,oBAAA,CAAAD,gBAAA;MACA;MACA,KAAAnC,SAAA,CAAAgB,MAAA,CAAAN,KAAA;IACA;IAEA2B,UAAA;MACA;MACA,KAAArC,SAAA;MACA,KAAAsC,eAAA;IACA;IAEAC,SAAA;MACA;MACA,KAAAC,cAAA,MAAAxC,SAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}