{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: () => ({\n    basket: [],\n    shopUser: null,\n    viruses: []\n  }),\n  mutations: {\n    updateViruses(state, viruses) {\n      state.viruses = viruses;\n    },\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    }\n  },\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n        this.state.shopUser = response.data;\n        console.log(\"Connection réussi !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnections réussi !\");\n      await router.push('/');\n    },\n    async getAllViruses({\n      commit\n    }) {\n      console.log('Récupération des viruses');\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        commit('updateViruses', response.data);\n        this.state.viruses = response.data;\n        console.log(\"Récupération des viruses réussi !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      // Vérifie si le virus est déjà dans le panier\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        // Si le virus existe, met à jour la quantité\n        commit('updateBasketItemQuantity', {\n          index: existingItemIndex,\n          quantity\n        });\n      } else {\n        // Sinon, ajoute le virus avec la quantité spécifiée\n        commit('addToBasket', {\n          virus,\n          quantity\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","mutations","updateViruses","updateShopUser","user","actions","shopLogin","commit","data","response","error","console","log","push","shopLogout","getAllViruses","addToCartAction","virus","quantity","existingItemIndex","findIndex","item","_id","index"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: () => ({\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: []\r\n    }),\r\n\r\n    mutations: {\r\n        updateViruses(state, viruses) {\r\n            state.viruses = viruses\r\n        },\r\n        updateShopUser(state, user) {\r\n            state.shopUser = user;\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            let response = await ShopService.shopLogin(data)\r\n            if (response.error === 0) {\r\n                commit('updateShopUser', response.data);\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connection réussi !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data)\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnections réussi !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses({commit}) {\r\n            console.log('Récupération des viruses');\r\n            let response = await ShopService.getAllViruses()\r\n            if (response.error === 0) {\r\n                commit('updateViruses', response.data)\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des viruses réussi !\");\r\n            } else {\r\n                console.log(response.data)\r\n            }\r\n        },\r\n\r\n        addToCartAction({ commit, state }, { virus, quantity }) {\r\n            // Vérifie si le virus est déjà dans le panier\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n\r\n            if (existingItemIndex !== -1) {\r\n                // Si le virus existe, met à jour la quantité\r\n                commit('updateBasketItemQuantity', { index: existingItemIndex, quantity });\r\n            } else {\r\n                // Sinon, ajoute le virus avec la quantité spécifiée\r\n                commit('addToBasket', { virus, quantity });\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":";AAAA,OAAOA,WAAW,MAAM,0BAA0B;AAClD,OAAOC,MAAM,MAAM,UAAU;AAE7B,eAAe;EACXC,KAAK,EAAEA,CAAA,MAAO;IACVC,MAAM,EAAE,EAAE;IACVC,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE;EACb,CAAC,CAAC;EAEFC,SAAS,EAAE;IACPC,aAAaA,CAACL,KAAK,EAAEG,OAAO,EAAE;MAC1BH,KAAK,CAACG,OAAO,GAAGA,OAAO;IAC3B,CAAC;IACDG,cAAcA,CAACN,KAAK,EAAEO,IAAI,EAAE;MACxBP,KAAK,CAACE,QAAQ,GAAGK,IAAI;IACzB;EACJ,CAAC;EAEDC,OAAO,EAAE;IACL,MAAMC,SAASA,CAAC;MAAEC;IAAO,CAAC,EAAEC,IAAI,EAAE;MAC9B,IAAIC,QAAQ,GAAG,MAAMd,WAAW,CAACW,SAAS,CAACE,IAAI,CAAC;MAChD,IAAIC,QAAQ,CAACC,KAAK,KAAK,CAAC,EAAE;QACtBH,MAAM,CAAC,gBAAgB,EAAEE,QAAQ,CAACD,IAAI,CAAC;QACvC,IAAI,CAACX,KAAK,CAACE,QAAQ,GAAGU,QAAQ,CAACD,IAAI;QACnCG,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QAClC,MAAMhB,MAAM,CAACiB,IAAI,CAAC,OAAO,CAAC;MAC9B,CAAC,MAAM;QACHF,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACD,IAAI,CAAC;MAC9B;IACJ,CAAC;IAED,MAAMM,UAAUA,CAAA,EAAG;MACf,IAAI,CAACjB,KAAK,CAACE,QAAQ,GAAG,IAAI;MAC1BY,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrC,MAAMhB,MAAM,CAACiB,IAAI,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED,MAAME,aAAaA,CAAC;MAACR;IAAM,CAAC,EAAE;MAC1BI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,IAAIH,QAAQ,GAAG,MAAMd,WAAW,CAACoB,aAAa,CAAC,CAAC;MAChD,IAAIN,QAAQ,CAACC,KAAK,KAAK,CAAC,EAAE;QACtBH,MAAM,CAAC,eAAe,EAAEE,QAAQ,CAACD,IAAI,CAAC;QACtC,IAAI,CAACX,KAAK,CAACG,OAAO,GAAGS,QAAQ,CAACD,IAAI;QAClCG,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MACpD,CAAC,MAAM;QACHD,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACD,IAAI,CAAC;MAC9B;IACJ,CAAC;IAEDQ,eAAeA,CAAC;MAAET,MAAM;MAAEV;IAAM,CAAC,EAAE;MAAEoB,KAAK;MAAEC;IAAS,CAAC,EAAE;MACpD;MACA,MAAMC,iBAAiB,GAAGtB,KAAK,CAACC,MAAM,CAACsB,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,KAAK,CAACK,GAAG,KAAKL,KAAK,CAACK,GAAG,CAAC;MAEtF,IAAIH,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC1B;QACAZ,MAAM,CAAC,0BAA0B,EAAE;UAAEgB,KAAK,EAAEJ,iBAAiB;UAAED;QAAS,CAAC,CAAC;MAC9E,CAAC,MAAM;QACH;QACAX,MAAM,CAAC,aAAa,EAAE;UAAEU,KAAK;UAAEC;QAAS,CAAC,CAAC;MAC9C;IACJ;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}