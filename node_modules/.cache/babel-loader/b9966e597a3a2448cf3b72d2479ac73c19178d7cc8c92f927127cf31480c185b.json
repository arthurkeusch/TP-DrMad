{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions } from 'vuex';\nimport CheckedList from \"@/components/CheckedList\";\nexport default {\n  name: 'VirusesView',\n  components: {\n    CheckedList\n  },\n  data: () => ({\n    priceFilter: 0,\n    nameFilter: '',\n    stockFilter: true,\n    filterPriceActive: false,\n    filterNameActive: false,\n    filterStockActive: false,\n    selected: []\n  }),\n  computed: {\n    ...mapState(['viruses']),\n    checked() {\n      let tab = [];\n      this.filterViruses.forEach(v => {\n        // find the index of virus v in this.viruses\n        let idx = this.viruses.findIndex(el => el == v);\n        // if idx is in selected, push true, else push false\n        if (this.selected.includes(idx)) {\n          tab.push(true);\n        } else {\n          tab.push(false);\n        }\n      });\n      return tab;\n    },\n    filterVirusesByPrice() {\n      // no active filter => get whole list\n      if (!this.filterPriceActive) return this.viruses;\n      let price = parseInt(this.priceFilter);\n      if (isNaN(price)) return [];\n      if (price > 0) return this.viruses.filter(v => v.price < price);\n      return this.viruses;\n    },\n    filterVirusesByName() {\n      // no active filter => get whole list\n      if (!this.filterNameActive) return this.viruses;\n      if (this.nameFilter) return this.viruses.filter(v => v.name.includes(this.nameFilter));\n      return this.viruses;\n    },\n    filterVirusesByStock() {\n      // no active filter => get whole list\n      if (!this.filterStockActive) return this.viruses;\n      if (this.stockFilter) return this.viruses.filter(v => v.stock > 0);\n      return this.viruses;\n    },\n    filterViruses() {\n      let list = this.viruses;\n      if (this.filterPriceActive) {\n        let price = parseInt(this.priceFilter);\n        if (!isNaN(price) && price > 0) {\n          list = list.filter(v => v.price < price);\n        }\n      }\n      if (this.filterNameActive) {\n        if (this.nameFilter) list = list.filter(v => v.name.includes(this.nameFilter));\n      }\n      if (this.filterStockActive) {\n        if (this.stockFilter) list = list.filter(v => v.stock > 0);\n      }\n      return list;\n    }\n  },\n  methods: {\n    ...mapActions(['getAllViruses']),\n    changeSelection(idx) {\n      // get the virus in the filtered list\n      let v = this.filterViruses[idx];\n      // search its index in this.viruses\n      let i = this.viruses.findIndex(el => el == v);\n      // if i is in selected, remove it\n      let j = this.selected.findIndex(el => el === i);\n      if (j !== -1) {\n        this.selected.splice(j, 1);\n      } else {\n        this.selected.push(i);\n      }\n    },\n    showVirusInfos(idx) {\n      let v = this.filterViruses[idx];\n      let msg = v.name + \", stock = \" + v.stock + \", for sell = \" + v.sold;\n      alert(msg);\n    },\n    showVirusNames() {\n      let msg = \"\";\n      this.selected.forEach(idx => {\n        msg += this.viruses[idx].name + \" \";\n      });\n      alert(msg);\n    }\n  },\n  mounted() {\n    this.getAllViruses();\n  }\n};","map":{"version":3,"names":["mapState","mapActions","CheckedList","name","components","data","priceFilter","nameFilter","stockFilter","filterPriceActive","filterNameActive","filterStockActive","selected","computed","checked","tab","filterViruses","forEach","v","idx","viruses","findIndex","el","includes","push","filterVirusesByPrice","price","parseInt","isNaN","filter","filterVirusesByName","filterVirusesByStock","stock","list","methods","changeSelection","i","j","splice","showVirusInfos","msg","sold","alert","showVirusNames","mounted","getAllViruses"],"sources":["src/views/VirusesView.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Les virus</h1>\n    <span>Filtres :</span>\n    <hr />\n    <label for=\"filterpriceactive\">par prix</label><input type=\"checkbox\" v-model=\"filterPriceActive\" id=\"filterpriceactive\">\n    <label for=\"filternameactive\">par nom</label><input type=\"checkbox\" v-model=\"filterNameActive\" id=\"filternameactive\">\n    <label for=\"filterstockactive\">par stock</label><input type=\"checkbox\" v-model=\"filterStockActive\" id=\"filterstockactive\">\n    <hr />\n    <table>\n      <tr>\n        <td v-if=\"filterPriceActive\">\n          <label for=\"filterprice\">prix inférieur à : </label><input v-model=\"priceFilter\" id=\"filterprice\">\n        </td>\n        <td v-if=\"filterNameActive\">\n          <label for=\"filtername\">nom contient : </label><input v-model=\"nameFilter\" id=\"filtername\">\n        </td>\n        <td v-if=\"filterStockActive\">\n          <label for=\"filterstock\">en stock</label><input type=\"checkbox\" v-model=\"stockFilter\" id=\"filterstock\">\n        </td>\n      </tr>\n    </table>\n    <hr />\n\n    <!-- version avec liste séparée : décommenter pour tester\n\n    <p>Liste filtrée par prix</p>\n    <ul>\n      <li v-for=\"(virus, index) in filterVirusesByPrice\" :key=\"index\">{{virus.name}} : {{virus.price}}</li>\n    </ul>\n    <hr />\n    <p>Liste filtrée par nom</p>\n    <ul>\n      <li v-for=\"(virus, index) in filterVirusesByName\" :key=\"index\">{{virus.name}} : {{virus.price}}</li>\n    </ul>\n    <hr />\n    <p>Liste filtrée par stock</p>\n    <table>\n      <tr>\n        <th>Nom</th><th>Prix</th>\n      </tr>\n      <tr v-for=\"(virus, index) in filterVirusesByStock\" :key=\"index\">\n        <td>{{virus.name}}</td>\n        <td>{{virus.price}}</td>\n      </tr>\n    </table>\n\n    -->\n\n    <!-- version avec filtre multi-critères -->\n    <CheckedList :data=\"filterViruses\"\n                 :fields=\"['name', 'price']\"\n                 item-check\n                 :item-button=\"{show: true, text:'Info'}\"\n                 :list-button=\"{show: true, text:'Select'}\"\n                 :checked=\"checked\"\n                 @checked-changed=\"changeSelection($event)\"\n                 @item-button-clicked=\"showVirusInfos($event)\"\n                 @list-button-clicked=\"showVirusNames()\"\n    >\n\n    </CheckedList>\n  </div>\n</template>\n\n<script>\n\nimport {mapState, mapActions} from 'vuex'\nimport CheckedList from \"@/components/CheckedList\";\nexport default {\n  name: 'VirusesView',\n  components: {CheckedList},\n  data: () => ({\n    priceFilter: 0,\n    nameFilter: '',\n    stockFilter: true,\n    filterPriceActive : false,\n    filterNameActive : false,\n    filterStockActive : false,\n    selected: []\n  }),\n  computed: {\n    ...mapState(['viruses']),\n    checked() {\n      let tab = []\n      this.filterViruses.forEach(v => {\n        // find the index of virus v in this.viruses\n        let idx = this.viruses.findIndex(el => el == v)\n        // if idx is in selected, push true, else push false\n        if (this.selected.includes(idx)) {\n          tab.push(true)\n        }\n        else {\n          tab.push(false)\n        }\n      })\n      return tab\n    },\n    filterVirusesByPrice() {\n      // no active filter => get whole list\n      if (!this.filterPriceActive) return this.viruses\n      let price = parseInt(this.priceFilter)\n      if (isNaN(price)) return []\n      if (price > 0) return this.viruses.filter(v => v.price < price)\n      return this.viruses\n    },\n    filterVirusesByName() {\n      // no active filter => get whole list\n      if (!this.filterNameActive) return this.viruses\n      if (this.nameFilter) return this.viruses.filter(v => v.name.includes(this.nameFilter))\n      return this.viruses\n    },\n    filterVirusesByStock() {\n      // no active filter => get whole list\n      if (!this.filterStockActive) return this.viruses\n      if (this.stockFilter) return this.viruses.filter(v => v.stock > 0)\n      return this.viruses\n    },\n    filterViruses() {\n      let list = this.viruses\n      if (this.filterPriceActive) {\n        let price = parseInt(this.priceFilter)\n        if ((!isNaN(price)) && (price > 0)) {\n          list = list.filter(v => v.price < price)\n        }\n      }\n      if (this.filterNameActive) {\n        if (this.nameFilter) list = list.filter(v => v.name.includes(this.nameFilter))\n      }\n      if (this.filterStockActive) {\n        if (this.stockFilter) list = list.filter(v => v.stock > 0)\n      }\n      return list\n    }\n  },\n  methods: {\n    ...mapActions(['getAllViruses']),\n    changeSelection(idx) {\n      // get the virus in the filtered list\n      let v = this.filterViruses[idx]\n      // search its index in this.viruses\n      let i = this.viruses.findIndex(el => el == v)\n      // if i is in selected, remove it\n      let j = this.selected.findIndex(el => el === i)\n      if (j !== -1) {\n        this.selected.splice(j,1)\n      }\n      else {\n        this.selected.push(i)\n      }\n    },\n    showVirusInfos(idx) {\n      let v = this.filterViruses[idx]\n      let msg = v.name+ \", stock = \"+v.stock+\", for sell = \"+v.sold\n      alert(msg)\n    },\n    showVirusNames() {\n      let msg = \"\"\n      this.selected.forEach(idx => {\n        msg += this.viruses[idx].name+\" \"\n      })\n      alert(msg)\n    }\n  },\n  mounted() {\n    this.getAllViruses()\n  }\n}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}