{"ast":null,"code":"import LocalSource from \"@/datasource/controller\";\nasync function getAccountAmountFromLocalSource(number) {\n  return LocalSource.getAccountAmount(number);\n}\nasync function getAccountTransactionsFromLocalSource(number) {\n  return LocalSource.getAccountTransactions(number);\n}\nasync function getAccountFromLocalSource(number) {\n  return LocalSource.getAccount(number);\n}\nasync function getTransactionsFromLocalSource(number) {\n  return LocalSource.getTransactions(number);\n}\nasync function createWithdrawFromLocalSource(id_account, amount) {\n  return LocalSource.createWithdraw(id_account, amount);\n}\nasync function createPaymentFromLocalSource(id_account, amount, destination) {\n  return LocalSource.createPayment(id_account, amount, destination);\n}\nasync function getAccountAmount(number) {\n  let response = null;\n  try {\n    response = await getAccountAmountFromLocalSource(number);\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getAccountTransactions(number) {\n  let response = null;\n  try {\n    response = await getAccountTransactionsFromLocalSource(number);\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getAccount(number) {\n  let response = null;\n  try {\n    response = {\n      error: 0,\n      status: 200,\n      data: await getAccountFromLocalSource(number)\n    };\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function getTransactions(number) {\n  let response = null;\n  try {\n    response = {\n      error: 0,\n      status: 200,\n      data: await getTransactionsFromLocalSource(number)\n    };\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function createWithdraw(id_account, amount) {\n  let response = null;\n  try {\n    response = {\n      error: 0,\n      status: 200,\n      data: await createWithdrawFromLocalSource(id_account, amount)\n    };\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nasync function createPayment(id_account, amount, destination) {\n  let response = null;\n  try {\n    response = {\n      error: 0,\n      status: 200,\n      data: await createPaymentFromLocalSource(id_account, amount, destination)\n    };\n  } catch (err) {\n    response = {\n      error: 1,\n      status: 404,\n      data: 'erreur réseau, impossible de se loguer'\n    };\n  }\n  return response;\n}\nexport default {\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n};","map":{"version":3,"names":["LocalSource","getAccountAmountFromLocalSource","number","getAccountAmount","getAccountTransactionsFromLocalSource","getAccountTransactions","getAccountFromLocalSource","getAccount","getTransactionsFromLocalSource","getTransactions","createWithdrawFromLocalSource","id_account","amount","createWithdraw","createPaymentFromLocalSource","destination","createPayment","response","err","error","status","data"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/services/bankaccount.service.js"],"sourcesContent":["import LocalSource from \"@/datasource/controller\";\n\nasync function getAccountAmountFromLocalSource(number) {\n  return LocalSource.getAccountAmount(number);\n}\n\nasync function getAccountTransactionsFromLocalSource(number) {\n  return LocalSource.getAccountTransactions(number);\n}\n\nasync function getAccountFromLocalSource(number) {\n  return LocalSource.getAccount(number);\n}\n\nasync function getTransactionsFromLocalSource(number) {\n  return LocalSource.getTransactions(number);\n}\n\nasync function createWithdrawFromLocalSource(id_account, amount) {\n  return LocalSource.createWithdraw(id_account, amount);\n}\n\nasync function createPaymentFromLocalSource(id_account, amount, destination) {\n  return LocalSource.createPayment(id_account, amount, destination);\n}\n\n\n\n\nasync function getAccountAmount(number) {\n  let response = null;\n  try {\n    response = await getAccountAmountFromLocalSource(number);\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nasync function getAccountTransactions(number) {\n  let response = null;\n  try {\n    response = await getAccountTransactionsFromLocalSource(number);\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nasync function getAccount(number) {\n  let response = null;\n  try {\n    response = {error: 0, status: 200, data: await getAccountFromLocalSource(number)};\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nasync function getTransactions(number) {\n  let response = null;\n  try {\n    response = {error: 0, status: 200, data: await getTransactionsFromLocalSource(number)};\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nasync function createWithdraw(id_account, amount) {\n  let response = null;\n  try {\n    response = {error: 0, status: 200, data: await createWithdrawFromLocalSource(id_account, amount)};\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nasync function createPayment(id_account, amount, destination) {\n  let response = null;\n  try {\n    response = {error: 0, status: 200, data: await createPaymentFromLocalSource(id_account, amount, destination)};\n  } catch(err) {\n    response = {error: 1, status: 404, data: 'erreur réseau, impossible de se loguer'};\n  }\n  return response;\n}\n\nexport default {\n  getAccountAmount,\n  getAccountTransactions,\n  getAccount,\n  getTransactions,\n  createWithdraw,\n  createPayment\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}