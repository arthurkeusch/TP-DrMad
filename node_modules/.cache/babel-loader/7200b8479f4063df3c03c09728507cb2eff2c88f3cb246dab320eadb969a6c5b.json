{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { items, shopusers, bankaccounts, transactions, orders } from './data';\nimport { v4 as uuidv4 } from 'uuid';\nfunction shopLogin(data) {\n  if (!data.login || !data.password) return {\n    error: 1,\n    status: 404,\n    data: 'aucun login/pass fourni'\n  };\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {\n    error: 1,\n    status: 404,\n    data: 'login/pass incorrect'\n  };\n  if (!user.uuid) user.uuid = uuidv4();\n  return {\n    error: 0,\n    status: 200,\n    data: user\n  };\n}\nfunction getAllViruses() {\n  return {\n    error: 0,\n    data: items\n  };\n}\nfunction getAccountAmount(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  return {\n    error: 0,\n    status: 200,\n    data: account.amount\n  };\n}\nfunction getAccountTransactions(number) {\n  if (!number) return {\n    error: 1,\n    status: 404,\n    data: 'aucun numéro de compte bancaire fourni'\n  };\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {\n    error: 1,\n    status: 404,\n    data: 'numéro de compte bancaire incorrect'\n  };\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {\n    error: 0,\n    status: 200,\n    data: trans\n  };\n}\nfunction getAllOrderFromClient(id) {\n  let clientOrders = [];\n  for (const order of orders) {\n    if (id === order._id) {\n      clientOrders.push(order);\n    }\n  }\n  return clientOrders;\n}\nexport default {\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAllOrderFromClient\n};","map":{"version":3,"names":["items","shopusers","bankaccounts","transactions","orders","v4","uuidv4","shopLogin","data","login","password","error","status","user","find","e","uuid","getAllViruses","getAccountAmount","number","account","a","amount","getAccountTransactions","trans","filter","t","_id","getAllOrderFromClient","id","clientOrders","order","push"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/datasource/controller.js"],"sourcesContent":["import { items, shopusers, bankaccounts, transactions, orders } from './data';\nimport {v4 as uuidv4} from 'uuid';\n\nfunction shopLogin(data) {\n  if ((!data.login) || (!data.password)) return {error: 1, status: 404, data: 'aucun login/pass fourni'};\n  let user = shopusers.find(e => e.login === data.login);\n  if (!user) return {error: 1, status: 404, data: 'login/pass incorrect'};\n  if (!user.uuid) user.uuid = uuidv4();\n  return {error: 0, status: 200, data: user};\n}\n\nfunction getAllViruses() {\n  return {error: 0, data: items};\n}\n\nfunction getAccountAmount(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  return {error: 0, status: 200, data: account.amount};\n}\n\nfunction getAccountTransactions(number) {\n  if (!number) return {error: 1, status: 404, data: 'aucun numéro de compte bancaire fourni'};\n  let account = bankaccounts.find(a => a.number === number);\n  if (!account) return {error: 1, status: 404, data: 'numéro de compte bancaire incorrect'};\n  // récupérer les transaction grâce à l'_id du compte\n  let trans = transactions.filter(t => t.account === account._id);\n  return {error: 0, status: 200, data: trans};\n}\n\nfunction getAllOrderFromClient(id) {\n  let clientOrders = [];\n  for (const order of orders) {\n    if (id === order._id) {\n      clientOrders.push(order);\n    }\n  }\n  return clientOrders;\n}\n\nexport default{\n  shopLogin,\n  getAllViruses,\n  getAccountAmount,\n  getAccountTransactions,\n  getAllOrderFromClient,\n}"],"mappings":";AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,YAAY,EAAEC,YAAY,EAAEC,MAAM,QAAQ,QAAQ;AAC7E,SAAQC,EAAE,IAAIC,MAAM,QAAO,MAAM;AAEjC,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,IAAK,CAACA,IAAI,CAACC,KAAK,IAAM,CAACD,IAAI,CAACE,QAAS,EAAE,OAAO;IAACC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAyB,CAAC;EACtG,IAAIK,IAAI,GAAGZ,SAAS,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACN,KAAK,KAAKD,IAAI,CAACC,KAAK,CAAC;EACtD,IAAI,CAACI,IAAI,EAAE,OAAO;IAACF,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAsB,CAAC;EACvE,IAAI,CAACK,IAAI,CAACG,IAAI,EAAEH,IAAI,CAACG,IAAI,GAAGV,MAAM,CAAC,CAAC;EACpC,OAAO;IAACK,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAEK;EAAI,CAAC;AAC5C;AAEA,SAASI,aAAaA,CAAA,EAAG;EACvB,OAAO;IAACN,KAAK,EAAE,CAAC;IAAEH,IAAI,EAAER;EAAK,CAAC;AAChC;AAEA,SAASkB,gBAAgBA,CAACC,MAAM,EAAE;EAChC,IAAI,CAACA,MAAM,EAAE,OAAO;IAACR,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAwC,CAAC;EAC3F,IAAIY,OAAO,GAAGlB,YAAY,CAACY,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACF,MAAM,KAAKA,MAAM,CAAC;EACzD,IAAI,CAACC,OAAO,EAAE,OAAO;IAACT,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAqC,CAAC;EACzF,OAAO;IAACG,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAEY,OAAO,CAACE;EAAM,CAAC;AACtD;AAEA,SAASC,sBAAsBA,CAACJ,MAAM,EAAE;EACtC,IAAI,CAACA,MAAM,EAAE,OAAO;IAACR,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAwC,CAAC;EAC3F,IAAIY,OAAO,GAAGlB,YAAY,CAACY,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACF,MAAM,KAAKA,MAAM,CAAC;EACzD,IAAI,CAACC,OAAO,EAAE,OAAO;IAACT,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAE;EAAqC,CAAC;EACzF;EACA,IAAIgB,KAAK,GAAGrB,YAAY,CAACsB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,OAAO,KAAKA,OAAO,CAACO,GAAG,CAAC;EAC/D,OAAO;IAAChB,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE,GAAG;IAAEJ,IAAI,EAAEgB;EAAK,CAAC;AAC7C;AAEA,SAASI,qBAAqBA,CAACC,EAAE,EAAE;EACjC,IAAIC,YAAY,GAAG,EAAE;EACrB,KAAK,MAAMC,KAAK,IAAI3B,MAAM,EAAE;IAC1B,IAAIyB,EAAE,KAAKE,KAAK,CAACJ,GAAG,EAAE;MACpBG,YAAY,CAACE,IAAI,CAACD,KAAK,CAAC;IAC1B;EACF;EACA,OAAOD,YAAY;AACrB;AAEA,eAAc;EACZvB,SAAS;EACTU,aAAa;EACbC,gBAAgB;EAChBK,sBAAsB;EACtBK;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}