{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ShopService from '../services/shop.service';\nimport router from \"@/router\";\nexport default {\n  state: () => ({\n    basket: [],\n    shopUser: null,\n    viruses: []\n  }),\n  mutations: {\n    updateViruses(state, viruses) {\n      state.viruses = viruses;\n    },\n    updateShopUser(state, user) {\n      state.shopUser = user;\n    },\n    addToBasket(state, {\n      virus,\n      quantity\n    }) {\n      state.basket.push({\n        virus,\n        quantity\n      });\n    },\n    updateBasketItemQuantity(state, {\n      index,\n      quantity\n    }) {\n      state.basket[index].quantity += quantity;\n    },\n    removeFromBasket(state, index) {\n      state.basket.splice(index, 1);\n    }\n  },\n  actions: {\n    async shopLogin({\n      commit\n    }, data) {\n      let response = await ShopService.shopLogin(data);\n      if (response.error === 0) {\n        commit('updateShopUser', response.data);\n        this.state.shopUser = response.data;\n        console.log(\"Connexion réussie !\");\n        await router.push('/shop');\n      } else {\n        console.log(response.data);\n      }\n    },\n    async shopLogout() {\n      this.state.shopUser = null;\n      console.log(\"Déconnexion réussie !\");\n      await router.push('/');\n    },\n    async getAllViruses({\n      commit\n    }) {\n      console.log('Récupération des virus');\n      let response = await ShopService.getAllViruses();\n      if (response.error === 0) {\n        commit('updateViruses', response.data);\n        this.state.viruses = response.data;\n        console.log(\"Récupération des virus réussie !\");\n      } else {\n        console.log(response.data);\n      }\n    },\n    addToCartAction({\n      commit,\n      state\n    }, {\n      virus,\n      quantity\n    }) {\n      // Vérifie si le virus est déjà dans le panier\n      const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\n      if (existingItemIndex !== -1) {\n        // Si le virus existe, met à jour la quantité dans le panier du store\n        commit('updateBasketItemQuantity', {\n          index: existingItemIndex,\n          quantity\n        });\n      } else {\n        // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\n        commit('addToBasket', {\n          virus,\n          quantity\n        });\n      }\n    },\n    removeFromCartAction({\n      commit,\n      state\n    }, selectedCartItem) {\n      // Recherche de l'index de l'élément dans le panier\n      const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\n      if (index !== -1) {\n        // Si l'élément est trouvé, le retire du panier\n        commit('removeFromBasket', index);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ShopService","router","state","basket","shopUser","viruses","mutations","updateViruses","updateShopUser","user","addToBasket","virus","quantity","push","updateBasketItemQuantity","index","removeFromBasket","splice","actions","shopLogin","commit","data","response","error","console","log","shopLogout","getAllViruses","addToCartAction","existingItemIndex","findIndex","item","_id","removeFromCartAction","selectedCartItem"],"sources":["/home/arthur/Documents/BUT/BUT2/Dev web/S3/Front-end/S3/tp4_v2/src/store/shop.js"],"sourcesContent":["import ShopService from '../services/shop.service'\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n    state: () => ({\r\n        basket: [],\r\n        shopUser: null,\r\n        viruses: []\r\n    }),\r\n\r\n    mutations: {\r\n        updateViruses(state, viruses) {\r\n            state.viruses = viruses;\r\n        },\r\n\r\n        updateShopUser(state, user) {\r\n            state.shopUser = user;\r\n        },\r\n\r\n        addToBasket(state, { virus, quantity }) {\r\n            state.basket.push({ virus, quantity });\r\n        },\r\n\r\n        updateBasketItemQuantity(state, { index, quantity }) {\r\n            state.basket[index].quantity += quantity;\r\n        },\r\n\r\n        removeFromBasket(state, index) {\r\n            state.basket.splice(index, 1);\r\n        },\r\n    },\r\n\r\n    actions: {\r\n        async shopLogin({ commit }, data) {\r\n            let response = await ShopService.shopLogin(data);\r\n            if (response.error === 0) {\r\n                commit('updateShopUser', response.data);\r\n                this.state.shopUser = response.data;\r\n                console.log(\"Connexion réussie !\");\r\n                await router.push('/shop');\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        async shopLogout() {\r\n            this.state.shopUser = null;\r\n            console.log(\"Déconnexion réussie !\");\r\n            await router.push('/');\r\n        },\r\n\r\n        async getAllViruses({commit}) {\r\n            console.log('Récupération des virus');\r\n            let response = await ShopService.getAllViruses();\r\n            if (response.error === 0) {\r\n                commit('updateViruses', response.data);\r\n                this.state.viruses = response.data;\r\n                console.log(\"Récupération des virus réussie !\");\r\n            } else {\r\n                console.log(response.data);\r\n            }\r\n        },\r\n\r\n        addToCartAction({ commit, state }, { virus, quantity }) {\r\n            // Vérifie si le virus est déjà dans le panier\r\n            const existingItemIndex = state.basket.findIndex(item => item.virus._id === virus._id);\r\n\r\n            if (existingItemIndex !== -1) {\r\n                // Si le virus existe, met à jour la quantité dans le panier du store\r\n                commit('updateBasketItemQuantity', { index: existingItemIndex, quantity });\r\n            } else {\r\n                // Sinon, ajoute le virus avec la quantité spécifiée dans le panier du store\r\n                commit('addToBasket', { virus, quantity });\r\n            }\r\n        },\r\n\r\n        removeFromCartAction({ commit, state }, selectedCartItem) {\r\n            // Recherche de l'index de l'élément dans le panier\r\n            const index = state.basket.findIndex(item => item.virus._id === selectedCartItem.virus._id);\r\n\r\n            if (index !== -1) {\r\n                // Si l'élément est trouvé, le retire du panier\r\n                commit('removeFromBasket', index);\r\n            }\r\n        },\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}