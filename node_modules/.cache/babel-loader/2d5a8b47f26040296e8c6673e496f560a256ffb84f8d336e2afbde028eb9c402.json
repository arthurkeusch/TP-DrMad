{"ast":null,"code":"import _toConsumableArray from \"/home/arthur/Documents/GitHub/TP-DrMad/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/home/arthur/Documents/GitHub/TP-DrMad/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/arthur/Documents/GitHub/TP-DrMad/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/arthur/Documents/GitHub/TP-DrMad/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport ItemsList from '../../src/components/ItemsList.vue';\nimport BasketList from '../../src/components/BasketList.vue';\nimport { mapActions } from 'vuex';\nexport default {\n  components: {\n    ItemsList: ItemsList,\n    BasketList: BasketList\n  },\n  mounted: function mounted() {\n    this.initPage();\n  },\n  data: function data() {\n    return {\n      viruses: [],\n      cartItems: [],\n      checkedViruses: [],\n      checkedCartItems: []\n    };\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['getAllViruses', 'addToCartAction', 'removeFromCartAction', 'clearCartAction', 'checkoutAction'])), {}, {\n    initPage: function initPage() {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.getAllViruses();\n            case 2:\n              _this.viruses = _this.$store.state.viruses;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    addToCart: function addToCart(_ref) {\n      var item = _ref.item,\n        amount = _ref.amount;\n      var selectedVirus = item;\n      var existingItemIndex = this.cartItems.findIndex(function (cartItem) {\n        return cartItem.virus._id === selectedVirus._id;\n      });\n      if (existingItemIndex !== -1) {\n        this.cartItems[existingItemIndex].quantity = parseInt(this.cartItems[existingItemIndex].quantity) + parseInt(amount);\n      } else {\n        this.cartItems.push({\n          virus: selectedVirus,\n          quantity: parseInt(amount)\n        });\n      }\n      this.addToCartAction({\n        virus: selectedVirus,\n        quantity: parseInt(amount)\n      });\n    },\n    addAllToCart: function addAllToCart(selectedItems) {\n      var _this2 = this;\n      this.checkedViruses.forEach(function (virusIndex) {\n        var virusToAdd = _this2.viruses[virusIndex];\n        var amountToAdd = selectedItems[virusIndex];\n        _this2.addToCart({\n          item: virusToAdd,\n          amount: amountToAdd\n        });\n      });\n    },\n    toggleCartItemCheckbox: function toggleCartItemCheckbox(index) {\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\n    },\n    removeFromCart: function removeFromCart(index) {\n      this.removeFromCartAction(index.index);\n      this.cartItems.splice(index.index, 1);\n    },\n    clearCart: function clearCart() {\n      this.cartItems = [];\n      this.clearCartAction();\n    },\n    checkout: function checkout() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var idcmd;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this3.checkoutAction(_this3.cartItems);\n            case 2:\n              idcmd = _context2.sent;\n              _this3.clearCart();\n              alert(\"La commande \\xE0 \\xE9t\\xE9 effectuer ! Votre id de commande :\\n\".concat(idcmd));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    toggleVirusCheckbox: function toggleVirusCheckbox(index) {\n      var updatedCheckedViruses = _toConsumableArray(this.checkedViruses);\n      var indexInArray = updatedCheckedViruses.indexOf(index);\n      if (indexInArray === -1) {\n        updatedCheckedViruses.push(index);\n      } else {\n        updatedCheckedViruses.splice(indexInArray, 1);\n      }\n      this.checkedViruses = updatedCheckedViruses;\n    }\n  })\n};","map":{"version":3,"names":["ItemsList","BasketList","mapActions","components","mounted","initPage","data","viruses","cartItems","checkedViruses","checkedCartItems","methods","_objectSpread","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","getAllViruses","$store","state","stop","addToCart","_ref","item","amount","selectedVirus","existingItemIndex","findIndex","cartItem","virus","_id","quantity","parseInt","push","addToCartAction","addAllToCart","selectedItems","_this2","forEach","virusIndex","virusToAdd","amountToAdd","toggleCartItemCheckbox","index","removeFromCart","removeFromCartAction","splice","clearCart","clearCartAction","checkout","_this3","_callee2","idcmd","_callee2$","_context2","checkoutAction","sent","alert","concat","toggleVirusCheckbox","updatedCheckedViruses","_toConsumableArray","indexInArray","indexOf"],"sources":["src/views/ShopBuy.vue"],"sourcesContent":["<!-- ShopBuy.vue -->\r\n<template>\r\n  <div>\r\n    <div class=\"shop-container\">\r\n      <div class=\"items-list\">\r\n        <ItemsList\r\n            :items=\"viruses\"\r\n            :checked=\"checkedViruses\"\r\n            @item-button-clicked=\"addToCart\"\r\n            @add-all-to-cart=\"addAllToCart\"\r\n            @checked-changed=\"toggleVirusCheckbox\"\r\n        />\r\n      </div>\r\n      <div class=\"basket-list\">\r\n        <BasketList\r\n            :items=\"cartItems\"\r\n            :checked=\"checkedCartItems\"\r\n            @checked-changed=\"toggleCartItemCheckbox\"\r\n            @item-button-clicked=\"removeFromCart\"\r\n            @list-button-clicked=\"clearCart\"\r\n            @acheter=\"checkout\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ItemsList from '../../src/components/ItemsList.vue';\r\nimport BasketList from '../../src/components/BasketList.vue';\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n  components: {\r\n    ItemsList,\r\n    BasketList,\r\n  },\r\n\r\n  mounted() {\r\n    this.initPage();\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      viruses: [],\r\n      cartItems: [],\r\n      checkedViruses: [],\r\n      checkedCartItems: [],\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions([\r\n      'getAllViruses',\r\n      'addToCartAction',\r\n      'removeFromCartAction',\r\n      'clearCartAction',\r\n      'checkoutAction',\r\n    ]),\r\n\r\n    async initPage() {\r\n      await this.getAllViruses();\r\n      this.viruses = this.$store.state.viruses;\r\n    },\r\n\r\n    addToCart({ item, amount}) {\r\n      const selectedVirus = item;\r\n      const existingItemIndex = this.cartItems.findIndex(\r\n          (cartItem) => cartItem.virus._id === selectedVirus._id\r\n      );\r\n      if (existingItemIndex !== -1) {\r\n        this.cartItems[existingItemIndex].quantity =\r\n            parseInt(this.cartItems[existingItemIndex].quantity) +\r\n            parseInt(amount);\r\n      } else {\r\n        this.cartItems.push({ virus: selectedVirus, quantity: parseInt(amount) });\r\n      }\r\n      this.addToCartAction({ virus: selectedVirus, quantity: parseInt(amount) });\r\n    },\r\n\r\n    addAllToCart(selectedItems) {\r\n      this.checkedViruses.forEach((virusIndex) => {\r\n        const virusToAdd = this.viruses[virusIndex];\r\n        const amountToAdd = selectedItems[virusIndex];\r\n        this.addToCart({ item: virusToAdd, amount: amountToAdd });\r\n      });\r\n    },\r\n\r\n    toggleCartItemCheckbox(index) {\r\n      this.checkedCartItems[index] = !this.checkedCartItems[index];\r\n    },\r\n\r\n    removeFromCart(index) {\r\n      this.removeFromCartAction(index.index);\r\n      this.cartItems.splice(index.index, 1);\r\n    },\r\n\r\n    clearCart() {\r\n      this.cartItems = [];\r\n      this.clearCartAction();\r\n    },\r\n\r\n    async checkout() {\r\n      const idcmd = await this.checkoutAction(this.cartItems);\r\n      this.clearCart();\r\n      alert(`La commande à été effectuer ! Votre id de commande :\\n${idcmd}`);\r\n    },\r\n\r\n    toggleVirusCheckbox(index) {\r\n      const updatedCheckedViruses = [...this.checkedViruses];\r\n      const indexInArray = updatedCheckedViruses.indexOf(index);\r\n      if (indexInArray === -1) {\r\n        updatedCheckedViruses.push(index);\r\n      } else {\r\n        updatedCheckedViruses.splice(indexInArray, 1);\r\n      }\r\n      this.checkedViruses = updatedCheckedViruses;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.shop-container {\r\n  display: flex;\r\n}\r\n\r\n.items-list {\r\n  flex: 1;\r\n  margin-right: 20px;\r\n}\r\n\r\n.basket-list {\r\n  flex: 1;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}